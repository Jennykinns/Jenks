global proc setUpUI () {
	
	if(`window -q -ex  mfParticle`) deleteUI mfParticle;  
	window -t "Particle Setup 1.1" -sizeable 1 -tlb 0 mfParticle; 
	
	// controls need a layout
	columnLayout -cat "left" 45  -w 350 -h 300   particleColl ;
	
	separator -w 300 -h 10 -hr 1 -st "single";
	
	text -w 300 -h 20 -vis 1 
	-label "Particle Setup"
	-align "center" -font "boldLabelFont" ;
	
	text -w 300 -h 60 -vis 1 
	-label "1. Select your Particle Group. \n 2. Set the relevant sliders. \n 3. Click the buttons!"
	-align "center" -font "fixedWidthFont" ;
	
	separator -w 300 -h 10 -hr 1 -st "single";
	
	separator -w 300 -h 5-hr 1 -st "none";
	
	button    -w 300 -h 30 -label "Undo" -command undo;
	
	separator -w 300 -h 5 -hr 1 -st "none";
	
	frameLayout	-l "idPP" -cll 1 -cl 1 -w 300
	idGroup;
	columnLayout -adj 1 
	idCol;
	
	intSliderGrp
	-w 280 -h 40
	-label "Num of objects:"
	-field true
	-value 0
	-minValue 0
	-maxValue 20
	-fieldMaxValue 500
	-sliderStep 1
	-cw3 90 40 80 
	-dc	"secNoiseSliderUpdateProc"
	-cc "secNoiseSliderUpdateProc"
	numObjectSlider;	
	
	button    -w 250 -h 30 -label "Add idPP" -command "idPPproc";	
	
	
	setParent idCol;
	setParent particleColl;
	
	/////////////////////////
	
	frameLayout	-l "radiusPP" -cll 1 -cl 1 -w 300
	radiusGroup;
	columnLayout -adj 1 
	radiusCol;
	
	floatSliderGrp
	-w 280 -h 40
	-label "Radius Min:"
	-field true
	-value 0.1
	-minValue 0.001
	-maxValue 10
	-fieldMaxValue 100
	-sliderStep 0.01
	-cw3 90 40 80 
	-dc	"secNoiseSliderUpdateProc"
	-cc "secNoiseSliderUpdateProc"
	radiusMinSlider;	
	
	floatSliderGrp
	-w 280 -h 40
	-label "Radius Max:"
	-field true
	-value 1
	-minValue 0
	-maxValue 10
	-fieldMaxValue 100
	-sliderStep 0.01
	-cw3 90 40 80 
	-dc	"secNoiseSliderUpdateProc"
	-cc "secNoiseSliderUpdateProc"
	radiusMaxSlider;	
	
	checkBoxGrp -ncb 1	
	-l "Weighting" 
	-v1 false 
	-ann "Makes more small particles then large, good for dust, sand and soil.\nRaduis Max becomes Standard Deviation."
	-cw1 70 radPPweightCheck;
	
	button    -w 250 -h 30 -label "Add radiusPP" -command "radiusPPproc";	
	
	setParent radiusCol;
	setParent particleColl;
	
	/////////////////////////
	
	
	frameLayout	-l "GoalUV" -cll 1 -cl 1 -w 300
	goalGroup;
	columnLayout -adj 1 
	goalCol;
	
	button    -w 250 -h 30 -label "Add goalUV" -command "goalUVproc";	
	
	setParent goalCol;
	setParent particleColl;
	
	/////////////////////////
	
	frameLayout	-l "Random Roation" -cll 1 -cl 1 -w 300
	rotationGroup;
	columnLayout -adj 1 
	rotationCol;
	
	floatSliderGrp
	-w 280 -h 40
	-label "Min Rotation:"
	-field true
	-value 0
	-minValue 0.0
	-maxValue 45
	-fieldMaxValue 360
	-sliderStep 0.1
	-cw3 90 40 80 
	-dc	"secNoiseSliderUpdateProc"
	-cc "secNoiseSliderUpdateProc"
	rotMinSlider;	
	
	floatSliderGrp
	-w 280 -h 40
	-label "Max Rotation:"
	-field true
	-value 360
	-minValue 0.0
	-maxValue 360
	-fieldMaxValue 360
	-sliderStep 0.1
	-cw3 90 40 90 
	-dc	"secNoiseSliderUpdateProc"
	-cc "secNoiseSliderUpdateProc"
	rotMaxSlider;	
	
	button    -w 250 -h 30 -label "Add Creation Rotation" -command "randRotProc";	
	
	floatSliderGrp
	-w 280 -h 40
	-label "X Spin:"
	-field true
	-value 1
	-minValue 0.0
	-maxValue 5
	-fieldMaxValue 100
	-sliderStep 0.01
	-cw3 90 40 80 
	-dc	"secNoiseSliderUpdateProc"
	-cc "secNoiseSliderUpdateProc"
	rotXSlider;	
	
	floatSliderGrp
	-w 280 -h 40
	-label "Y Spin:"
	-field true
	-value 1
	-minValue 0.0
	-maxValue 5
	-fieldMaxValue 100
	-sliderStep 0.01
	-cw3 90 40 90 
	-dc	"secNoiseSliderUpdateProc"
	-cc "secNoiseSliderUpdateProc"
	rotYSlider;	
	
	floatSliderGrp
	-w 280 -h 40
	-label "Z Spin:"
	-field true
	-value 1
	-minValue 0.0
	-maxValue 5
	-fieldMaxValue 100
	-sliderStep 0.01
	-cw3 90 40 90 
	-dc	"secNoiseSliderUpdateProc"
	-cc "secNoiseSliderUpdateProc"
	rotZSlider;
	
	button    -w 250 -h 30 -label "Add Creation + Drift Rotation" -command "randRotDriftProc";	
	
	setParent rotationCol;
	setParent particleColl;
	
	/////////////////////////
	
	
	frameLayout	-l "Start Frame" -cll 1 -cl 1 -w 300
	startGroup;
	columnLayout -adj 1 
	startCol;
	
	intSliderGrp
	-w 280 -h 40
	-label "Num of Frames:"
	-field true
	-value 0
	-minValue 0
	-maxValue 50
	-fieldMaxValue 500
	-sliderStep 1
	-cw3 90 40 80 
	-dc	"secNoiseSliderUpdateProc"
	-cc "secNoiseSliderUpdateProc"
	startFrameSlider;	
	
	button    -w 250 -h 30 -label "Add startFramePP" -command "startFrameProc";	
	
	setParent startCol;
	setParent particleColl;
	
	/////////////////////////
	
	
	frameLayout	-l "Secondary Noise" -cll 1 -cl 1 -w 300
	driftGroup;
	columnLayout -adj 1 
	driftCol;
	
	floatSliderGrp
	-w 280 -h 40
	-label "Amplitude:"
	-field true
	-value 1
	-minValue 0.0
	-maxValue 5
	-fieldMaxValue 100
	-sliderStep 0.01
	-cw3 90 40 80 
	-dc	"secNoiseSliderUpdateProc"
	-cc "secNoiseSliderUpdateProc"
	posDriftAmpSlider;	
	
	floatSliderGrp
	-w 280 -h 40
	-label "Frequency:"
	-field true
	-value 1
	-minValue 0
	-maxValue 5
	-fieldMaxValue 100
	-sliderStep 0.01
	-cw3 90 40 90 
	-dc	"secNoiseSliderUpdateProc"
	-cc "secNoiseSliderUpdateProc"
	posDriftFreqSlider;	
	
	floatSliderGrp
	-w 280 -h 40
	-label "Offset Seed:"
	-field true
	-value 1
	-minValue 0
	-maxValue 5
	-fieldMaxValue 100
	-sliderStep 0.01
	-cw3 90 40 90 
	-dc	"secNoiseSliderUpdateProc"
	-cc "secNoiseSliderUpdateProc"
	posDriftSeedSlider;	
	
	button    -w 250 -h 30 -label "Add Secondary Noise" -command "secondaryNoiseProc";	
	
	setParent driftCol;
	setParent particleColl;
	
	/////////////////////////
	
	frameLayout	-l "Particle Trails" -cll 1 -cl 1 -w 300
	trailGroup;
	columnLayout -adj 1 
	trailCol;
	
	floatSliderGrp
	-w 280 -h 40
	-label "Step Size:"
	-field true
	-value 0.04
	-minValue 0.01
	-maxValue 0.1
	-fieldMaxValue 1
	-fieldMinValue 0.005
	-sliderStep 0.01
	-cw3 90 40 80 
	-dc	"secNoiseSliderUpdateProc"
	-cc "secNoiseSliderUpdateProc"
	stepSizeSlider;	
	
	button    -w 250 -h 30 -label "Set up new particle trails system" -command "newTrailProc";
	button    -w 250 -h 30 -label "Add particle trails to selected particles" -command "addTrailProc";	
	
	setParent trailCol;
	setParent particleColl;
	
	///////////////////////// UNCOMMENT THIS SECTION TO USE MANUAL GOALING /////////////////////////
	/*
	frameLayout	-l "Manual Goaling" -cll 1 -cl 1 -w 300
	noiseGroup;
	columnLayout -adj 1 
	noiseCol;
	
	button    -w 250 -h 30 -label "Set Goal Object" -command "setUpGoalsProc";
	
	rowLayout
	-numberOfColumns 2
	-cat 1 "both" 12
	-columnWidth2 150 150;
	
	intField -minValue -100 -maxValue 1000 -value 0 goal1StartIntField;
	intField -minValue -100 -maxValue 1000 -value 100 goal1EndIntField;
	
	setParent ..;
	
	rowLayout
	-numberOfColumns 3
	-cat 1 "left" 5
	-columnWidth2 150 150;
	
	button    -w 140 -h 30 -label "Set Start" -command "secNoiseSliderUpdateProc";
	
	button    -w 140 -h 30 -label "Set End" -command "secNoiseSliderUpdateProc";
	
	setParent ..;
	
	
	
	floatSliderGrp
	-w 280 -h 40
	-label "Variation:"
	-field true
	-value 0.5
	-minValue 0
	-maxValue 10
	-fieldMaxValue 100
	-sliderStep 0.1
	-cw3 60 40 120
	-dc	"secNoiseSliderUpdateProc"
	-cc "secNoiseSliderUpdateProc"
	goal1VarSlider;	
	
	
	//button    -w 250 -h 30 -label "Add Another Goal" -command "goalScriptProc";	
	
	separator -w 300 -h 10 -hr 1 -st "single";
	setParent noiseCol;
	setParent particleColl;
	*/
		
	/////////////////////////
	
	
	showWindow mfParticle;
	window -e -w 400-h 360 mfParticle;
	
	recoverSession;
}

global proc newTrailProc () 

{	
	string $emitter[0] = `emitter -pos 0 0 0 -type omni -r 5 -sro 0 -nuv 1 -cye none -cyi 1 -spd 10 -srn 0 -nsp 0 -tsp 0 -mxd 0 -mnd 0 -dx 1 -dy 0 -dz 0 -sp 0 -vsh cube -vof 0 0 0 -vsw 360 -tsr 0.5 -afc 0 -afx 1 -arx 0 -alx 0 -rnd 0 -drs 0 -ssz 0` ;
	string $masterParticles[] = `nParticle`;
	string $masterShape[] = `listRelatives -shapes $masterParticles[0]`;
	connectDynamic -em $emitter[0] $masterParticles[0];
	string $slaveParticles[] = `nParticle`;
	string $slaveShape[] = `listRelatives -shapes $slaveParticles[0]`;
	setAttr ($slaveShape[0]+".collide") 0;
	print ("masterParticles is " + $masterParticles[0] + "\n");
	
	addAttr -ln "prevPos"  -dt vectorArray  $masterShape[0];
	setAttr -e-keyable true ($masterShape[0] +".prevPos");
	
	addAttr -ln "stepSize"  -at double  $masterShape[0];
	setAttr -e -keyable true ($masterShape[0]+".stepSize");
	float $stepSize = `floatSliderGrp -q -value "stepSizeSlider"`;
	setAttr ($masterShape[0]+".stepSize") $stepSize;
	
	string $RBDexpression = "prevPos = position;\n";
	dynExpression -s $RBDexpression -rbd $masterShape[0];
	
	string $RADexpression = "\n";
	$RADexpression += ("float $stepSize = " + $masterShape[0] + ".stepSize;\n");
	$RADexpression += "vector $prevPosition = prevPos;\n";
	$RADexpression += "vector $position = position;\n";
	$RADexpression += "vector $distanceMoved = <<(($position.x)-($prevPosition.x)), (($position.y)-($prevPosition.y)), (($position.z)-($prevPosition.z))>>;\n";
	$RADexpression += "int $newCount =  ceil(mag( $distanceMoved ) / $stepSize) ;\n";
	$RADexpression += "if( $newCount != 0 ) {\n";
	$RADexpression += "vector $step = $distanceMoved / $newCount;\n";
	$RADexpression += "for( $i = 0; $i < $newCount; $i++ ) {\n";
	$RADexpression += "vector $newPos = $prevPosition + $step*$i;\n";
	$RADexpression += "float $life = time - (1.0/25/$newCount * ($newCount-$i));\n";
	$RADexpression += ("emit -o " + $slaveParticles[0] + " -pos ($newPos.x) ($newPos.y) ($newPos.z) -at \"birthTime\" -fv $life;\n");
	$RADexpression += "	}\n";
	$RADexpression += "}\n";
	
	dynExpression -s $RADexpression -rad $masterParticles[0];
	
	print ("Particle Trail Sucsess!");
}

global proc addTrailProc () 

{	
	
	string $masterParticles[ ] = `ls -sl`; 
	string $masterShape[] = `listRelatives -shapes $masterParticles[0]`;
	string $slaveParticles[] = `nParticle`;
	string $slaveShape[] = `listRelatives -shapes $slaveParticles[0]`;
	setAttr ($slaveShape[0]+".collide") 0;
	print ("masterParticles is " + $masterParticles[0] + "\n");
	
	addAttr -ln "prevPos"  -dt vectorArray  $masterShape[0];
	setAttr -e-keyable true ($masterShape[0] +".prevPos");
	
	
	addAttr -ln "stepSize"  -at double  $masterShape[0];
	setAttr -e -keyable true ($masterShape[0]+".stepSize");
	float $stepSize = `floatSliderGrp -q -value "stepSizeSlider"`;
	setAttr ($masterShape[0]+".stepSize") $stepSize;
	
	string $currentRBDExpression =  `dynExpression -q -rbd $masterShape[0]`;
	string $RBDexpression = "prevPos = position;\n";
	string $mergedRBDExpression = $currentRBDExpression + "\n" +  $RBDexpression; 
	dynExpression -s $mergedRBDExpression -rbd $masterShape[0];
	
	string $currentRADExpression =  `dynExpression -q -rad $masterShape[0]`;
	string $RADexpression = "\n";
	$RADexpression += ("float $stepSize = " + $masterShape[0] + ".stepSize;\n");
	$RADexpression += "vector $prevPosition = prevPos;\n";
	$RADexpression += "vector $position = position;\n";
	$RADexpression += "vector $distanceMoved = <<(($position.x)-($prevPosition.x)), (($position.y)-($prevPosition.y)), (($position.z)-($prevPosition.z))>>;\n";
	$RADexpression += "int $newCount =  ceil(mag( $distanceMoved ) / $stepSize) ;\n";
	$RADexpression += "if( $newCount != 0 ) {\n";
	$RADexpression += "vector $step = $distanceMoved / $newCount;\n";
	$RADexpression += "for( $i = 0; $i < $newCount; $i++ ) {\n";
	$RADexpression += "vector $newPos = $prevPosition + $step*$i;\n";
	$RADexpression += "float $life = time - (1.0/25/$newCount * ($newCount-$i));\n";
	$RADexpression += ("emit -o " + $slaveParticles[0] + " -pos ($newPos.x) ($newPos.y) ($newPos.z) -at \"birthTime\" -fv $life;\n");
	$RADexpression += "	}\n";
	$RADexpression += "}\n";
	
	string $mergedRADExpression = $currentRADExpression + "\n" +  $RADexpression; 
	dynExpression -s $mergedRADExpression -rad $masterParticles[0];
	
	print ("Particle Trail Sucsess!");

}



global proc idPPproc () 

{	
	string $selectedObjects[ ] = `ls -sl`; 
	string $relatives[] = `listRelatives -shapes $selectedObjects[0]`;
	
	int $numObjects = `intSliderGrp -q -value "numObjectSlider"`;
	addAttr -ln "idPP"  -dt doubleArray  $relatives[0];
	setAttr -e-keyable true ($relatives[0] +".idPP");
	
	addAttr -ln "NumOfObjects"  -at long  $relatives[0];
	setAttr -e -keyable true ($relatives[0]+".NumOfObjects");
	float $noo = `intSliderGrp -q -value "numObjectSlider"`;
	setAttr ($relatives[0]+".NumOfObjects") $numObjects;
	
	string $currentExpression =  `dynExpression -q -c $relatives[0]`;
	string $additionalExpression = "seed(particleId);\n";
	$additionalExpression += "float $NumObj = NumOfObjects;\n";
	$additionalExpression += "idPP = rand(0,$NumObj);\n";
	string $mergedExpression = $currentExpression + "\n" +  $additionalExpression; 
	
	dynExpression -s $mergedExpression -c $relatives[0];
	
	print ("idPP Sucsess!");
	
}

global proc radiusPPproc () 

{	
	string $selectedObjects[ ] = `ls -sl`; 
	string $relatives[] = `listRelatives -shapes $selectedObjects[0]`;
	int	$isWeighted	= `checkBoxGrp -q -v1 radPPweightCheck`;
	
	float $radiusMin = `floatSliderGrp -q -value "radiusMinSlider"`;
	float $radiusMax = `floatSliderGrp -q -value "radiusMaxSlider"`;
	
	addAttr -ln "radPP"  -dt vectorArray  $relatives[0];
	setAttr -e-keyable true ($relatives[0] +".radPP");
	
	addAttr -ln "MinRadius"  -at double  $relatives[0];
	setAttr -e -keyable true ($relatives[0]+".MinRadius");
	float $min = `floatSliderGrp -q -value "radiusMinSlider"`;
	setAttr ($relatives[0]+".MinRadius") $radiusMin;
	
	addAttr -ln "MaxRadius"  -at double  $relatives[0];
	setAttr -e -keyable true ($relatives[0]+".MaxRadius");
	float $max = `floatSliderGrp -q -value "radiusMaxSlider"`;
	setAttr ($relatives[0]+".MaxRadius") $radiusMax;
	
	if(`objExists ($relatives[0] + ".internalRadiusRamp")`)
	disconnectAttr ($relatives[0] + ".internalRadiusRamp") ($relatives[0] + ".radiusPP");
	
	string $currentExpression =  `dynExpression -q -c $relatives[0]`;
	string $additionalExpression;
	
	if( $isWeighted ) {
	$additionalExpression = "seed(particleId);\n";
	$additionalExpression += "float $minRad = MinRadius;\n";
	$additionalExpression += "float $standardDeviation = MaxRadius;\n";
	$additionalExpression += ("radPP = abs( gauss( $standardDeviation )) + $minRad;");
	if(`objExists ($relatives[0] + ".radiusPP")`){
	$additionalExpression += ("radiusPP = radPP;");
	}
	}
	else {
	$additionalExpression = "seed(particleId);\n";
	$additionalExpression += "float $minRad = MinRadius;\n";
	$additionalExpression += "float $maxRad = MaxRadius;\n";
	$additionalExpression += ("radPP = <<rand($minRad,$maxRad),rand($minRad,$maxRad),rand($minRad,$maxRad)>>;");
	if(`objExists ($relatives[0] + ".radiusPP")`){
	$additionalExpression += ("radiusPP = radPP;");
	}
	}
	
	string $mergedExpression = ($currentExpression + "\n" +  $additionalExpression); 
	
	dynExpression -s $mergedExpression -c $relatives[0];
	
	print "RadiusPP Sucsess! \n";
}

global proc randRotProc () 

{
	
	
	string $selectedObjects[ ] = `ls -sl`; 
	string $relatives[] = `listRelatives -shapes $selectedObjects[0]`;
	
	if (!`attributeQuery -node $relatives[0] -exists "rotPP"` )
	{	
		addAttr -ln "rotPP"  -dt vectorArray  $relatives[0];
		setAttr -e-keyable true ($relatives[0] +".rotPP");
		
		addAttr -ln "MinCreationRot"  -at double  $relatives[0];
		setAttr -e -keyable true ($relatives[0]+".MinCreationRot");
		float $min = `floatSliderGrp -q -value "rotMinSlider"`;
		setAttr ($relatives[0]+".MinCreationRot") $min;
		
		addAttr -ln "MaxCreationRot"  -at double  $relatives[0];
		setAttr -e -keyable true ($relatives[0]+".MaxCreationRot");
		float $max = `floatSliderGrp -q -value "rotMaxSlider"`;
		setAttr ($relatives[0]+".MaxCreationRot") $max;
		
		string $currentExpression =  `dynExpression -q -c $relatives[0]`;
		
		string $additionalExpression = "seed(particleId);\n";
		$additionalExpression += "float $minRot = MinCreationRot;\n";
		$additionalExpression += "float $maxRot = MaxCreationRot;\n";
		
		$additionalExpression += ("rotPP = <<rand($minRot,$maxRot),rand($minRot,$maxRot),rand($minRot,$maxRot)>>;");
		
		string $mergedExpression = ($currentExpression + "\n" +  $additionalExpression); 
		
		dynExpression -s $mergedExpression -c $relatives[0];
		
		print "RotPP Sucsess! \n";
	}
}

global proc goalUVproc () 

{	
	string $selectedObjects[ ] = `ls -sl`; 
	string $relatives[] = `listRelatives -shapes $selectedObjects[0]`;
	
	addAttr -ln goalU -dt doubleArray $relatives[0];
	addAttr -ln goalV -dt doubleArray $relatives[0];
	
	string $currentExpression =  `dynExpression -q -c $relatives[0]`;
	string $additionalExpression = ("goalU = rand(0,1);\ngoalV = rand(0,1);");
	string $mergedExpression = $currentExpression + "\n" + $additionalExpression; 
	
	dynExpression -s $mergedExpression -c $relatives[0];
	
	print ("GoalUV Sucsess!");
}

global proc startFrameProc () 

{	
	string $selectedObjects[ ] = `ls -sl`; 
	string $relatives[] = `listRelatives -shapes $selectedObjects[0]`;
	
	int $numFrames = `intSliderGrp -q -value "startFrameSlider"`;
	addAttr -ln "startFramePP"  -dt doubleArray  $relatives[0];
	setAttr -e-keyable true ($relatives[0] +".startFramePP");
	
	addAttr -ln "NumOfFrames"  -at long  $relatives[0];
	setAttr -e -keyable true ($relatives[0]+".NumOfFrames");
	int $nof = `intSliderGrp -q -value "startFrameSlider"`;
	setAttr ($relatives[0]+".NumOfFrames") $numFrames;
	
	string $currentExpression =  `dynExpression -q -c $relatives[0]`;
	
	string $additionalExpression = "seed(particleId);\n";
	$additionalExpression += "float $startFrame = NumOfFrames;\n";
	$additionalExpression += "startFramePP = rand(0,$startFrame);\n";
	
	string $mergedExpression = $currentExpression + "\n" +  $additionalExpression; 
	
	dynExpression -s $mergedExpression -c $relatives[0];
	
	print ("Start Frame Sucsess!");
}

global proc secondaryNoiseProc () 

{	
	string $selectedObjects[ ] = `ls -sl`; 
	string $relatives[] = `listRelatives -shapes $selectedObjects[0]`;
	
	float $noiseAmplitude = `floatSliderGrp -q -value "posDriftAmpSlider"`;
	float $noiseFrequency = `floatSliderGrp -q -value "posDriftFreqSlider"`;
	
	addAttr -ln "NoiseAmplitude"  -at double  $relatives[0];
	setAttr -e -keyable true ($relatives[0]+".NoiseAmplitude");
	float $amplitude = `floatSliderGrp -q -value "posDriftAmpSlider"`;
	setAttr ($relatives[0]+".NoiseAmplitude") $amplitude;
	
	addAttr -ln "NoiseFrequency"  -at double  $relatives[0];
	setAttr -e -keyable true ($relatives[0]+".NoiseFrequency");
	float $frequency = `floatSliderGrp -q -value "posDriftFreqSlider"`;
	setAttr ($relatives[0]+".NoiseFrequency") $frequency;
	
	addAttr -ln "NoiseSeed"  -at double  $relatives[0];
	setAttr -e -keyable true ($relatives[0]+".NoiseSeed");
	float $seed = `floatSliderGrp -q -value "posDriftSeedSlider"`;
	setAttr ($relatives[0]+".NoiseSeed") $seed;
	
	string $currentExpression =  `dynExpression -q -rbd $relatives[0]`;
	string $additionalExpression;
	
	$additionalExpression += "vector $pos = position;\n";
	$additionalExpression += "float $frequency = NoiseFrequency;\n";
	$additionalExpression += "float $amplitude = NoiseAmplitude;\n";
	$additionalExpression += "float $seed = NoiseSeed;\n";
	$additionalExpression += "vector $noiseVector = <<(frame + particleId + $seed)*($frequency*0.01), (frame + particleId + $seed)*($frequency*0.01),(frame + particleId + $seed)*($frequency*0.01) >>;\n";
	$additionalExpression += "vector $newPosition = $pos + ((dnoise($noiseVector))*age*$amplitude);\n";
	$additionalExpression += "position = $newPosition;\n";
	
	string $mergedExpression = ($currentExpression + "\n" +  $additionalExpression); 
	dynExpression -s $mergedExpression -rbd $relatives[0];
	
	print "Secondary Noise Sucsess! \n";
}



global proc randRotDriftProc () 

{
	
	string $selectedObjects[ ] = `ls -sl`; 
	string $relatives[] = `listRelatives -shapes $selectedObjects[0]`;
	
	if (!`attributeQuery -node $relatives[0] -exists "rotPP"` )
	{
		randRotProc;
	}
	
	addAttr -ln "RotXSpeed"  -at double  $relatives[0];
	setAttr -e -keyable true ($relatives[0]+".RotXSpeed");
	float $amplitude = `floatSliderGrp -q -value "rotXSlider"`;
	setAttr ($relatives[0]+".RotXSpeed") $amplitude;
	
	addAttr -ln "RotYSpeed"  -at double  $relatives[0];
	setAttr -e -keyable true ($relatives[0]+".RotYSpeed");
	float $amplitude = `floatSliderGrp -q -value "rotYSlider"`;
	setAttr ($relatives[0]+".RotYSpeed") $amplitude;
	
	addAttr -ln "RotZSpeed"  -at double  $relatives[0];
	setAttr -e -keyable true ($relatives[0]+".RotZSpeed");
	float $amplitude = `floatSliderGrp -q -value "rotZSlider"`;
	setAttr ($relatives[0]+".RotZSpeed") $amplitude;
	
	string $currentExpression =  `dynExpression -q -rbd $relatives[0]`;
	string $additionalExpression;
	
	$additionalExpression += "seed(particleId);\n";
	$additionalExpression += "vector $currentRot = rotPP;\n";
	$additionalExpression += "float $xSpeed = RotXSpeed;\n";
	$additionalExpression += "float $ySpeed = RotYSpeed;\n";
	$additionalExpression += "float $zSpeed = RotZSpeed;\n";
	
	$additionalExpression += "float $xSpin = $currentRot.x + rand($xSpeed);\n";
	$additionalExpression += "float $ySpin = $currentRot.y + rand($ySpeed);\n";
	$additionalExpression += "float $zSpin = $currentRot.z + rand($zSpeed);\n";
	
	$additionalExpression += "rotPP = <<$xSpin,$ySpin,$zSpin>>;\n";
	
	string $mergedExpression = ($currentExpression + "\n" +  $additionalExpression); 
	dynExpression -s $mergedExpression -rbd $relatives[0];
	
	print "Drift Rotation Sucsess! \n";
	
}


global proc secNoiseSliderUpdateProc () 

{
	
	string $selectedObjects[ ] = `ls -sl`; 
	
	if (size($selectedObjects) > 0) {
		
		string $relatives[] = `listRelatives -shapes $selectedObjects[0]`;
		
		if (size($relatives) > 0) {
			
			if (`objectType -isType "nParticle" $relatives[0]`) {
				
					setAttributes;			
			}
			
			
			else if (`objectType -isType "particle" $relatives[0]`) {
				
					setAttributes;		
			}
			
			else {
			
				warning ("No changes made, you need to select a Particle transform.");
			}			
			
		}
		else {
			warning ("No changes made, you need to select a Particle transform.");
		}
	}
	
}

global proc setAttributes ()

{

	string $selectedObjects[ ] = `ls -sl`; 
	
	string $relatives[] = `listRelatives -shapes $selectedObjects[0]`;
		
		
	if ( `attributeQuery -node $relatives[0] -exists "NoiseFrequency"` )
				{
					float $frequency = `floatSliderGrp -q -value "posDriftFreqSlider"`;
					setAttr ($relatives[0]+".NoiseFrequency") $frequency;
					
					float $amplitude = `floatSliderGrp -q -value "posDriftAmpSlider"`;
					setAttr ($relatives[0]+".NoiseAmplitude") $amplitude;
					
					float $seed = `floatSliderGrp -q -value "posDriftSeedSlider"`;
					setAttr ($relatives[0]+".NoiseSeed") $seed;
				}
				
				
				if ( `attributeQuery -node $relatives[0] -exists "RotXSpeed"` )
				{
					float $xSpeed = `floatSliderGrp -q -value "rotXSlider"`;
					setAttr ($relatives[0]+".RotXSpeed") $xSpeed;
					
					float $ySpeed = `floatSliderGrp -q -value "rotYSlider"`;
					setAttr ($relatives[0]+".RotYSpeed") $ySpeed;
					
					float $zSpeed = `floatSliderGrp -q -value "rotZSlider"`;
					setAttr ($relatives[0]+".RotZSpeed") $zSpeed;
				}
				
				if ( `attributeQuery -node $relatives[0] -exists "MinCreationRot"` )
				{
					float $minRot = `floatSliderGrp -q -value "rotMinSlider"`;
					setAttr ($relatives[0]+".MinCreationRot") $minRot;
					
					float $maxRot = `floatSliderGrp -q -value "rotMaxSlider"`;
					setAttr ($relatives[0]+".MaxCreationRot") $maxRot;
					
				}
				
				
				if ( `attributeQuery -node $relatives[0] -exists "MinRadius"` )
				{
					
					float $minRot = `floatSliderGrp -q -value "radiusMinSlider"`;
					setAttr ($relatives[0]+".MinRadius") $minRot;
					
					float $maxRot = `floatSliderGrp -q -value "radiusMaxSlider"`;
					setAttr ($relatives[0]+".MaxRadius") $maxRot;
				}
				
				if ( `attributeQuery -node $relatives[0] -exists "NumOfFrames"` )
				{
					
					int $maxRot = `intSliderGrp -q -value "startFrameSlider"`;
					setAttr ($relatives[0]+".NumOfFrames") $maxRot;
					
				}
				
				if ( `attributeQuery -node $relatives[0] -exists "NumOfObjects"` )
				{
					
					int $maxRot = `intSliderGrp -q -value "numObjectSlider"`;
					setAttr ($relatives[0]+".NumOfObjects") $maxRot;
					
				}
				
				if ( `attributeQuery -node $relatives[0] -exists "Goal1Start"` )
				{
					
					int $goal1Start = `intField -query -value goal1StartIntField`;
					setAttr ($relatives[0]+".Goal1Start") $goal1Start;
					
					int $goal1End = `intField -query -value goal1EndIntField`;
					setAttr ($relatives[0]+".Goal1End") $goal1End;
					
					
					float $g1v = `floatSliderGrp -q -value "goal1VarSlider"`;
					setAttr ($relatives[0]+".Goal1Var") $g1v;
					
				}	
				
				if ( `attributeQuery -node $relatives[0] -exists "stepSize"` )
				{
					
					float $sss = `floatSliderGrp -q -value "stepSizeSlider"`;
					setAttr ($relatives[0]+".stepSize") $sss;
					
				}	

}


global proc recoverSession () 

{
	
	string $selectedObjects[ ] = `ls -sl`; 
	
	if (size($selectedObjects) > 0) {
		
		string $relatives[] = `listRelatives -shapes $selectedObjects[0]`;
		
		if (size($relatives) > 0) {
			
			if ( `attributeQuery -node $relatives[0] -exists "NoiseFrequency"` )
			{
				
				float $frequency = `getAttr ($relatives[0]+".NoiseFrequency")`;	
				floatSliderGrp -e -value $frequency "posDriftFreqSlider";
				
				
				float $amplitude = `getAttr ($relatives[0]+".NoiseAmplitude")`;	
				floatSliderGrp -e -value $amplitude "posDriftAmpSlider";
				
				
				float $seed = `getAttr ($relatives[0]+".NoiseSeed")`;	
				floatSliderGrp -e -value $seed "posDriftSeedSlider";
				
				print ("Secondary Noise settings recovered.\n");
			}
			
			if ( `attributeQuery -node $relatives[0] -exists "RotXSpeed"` )
			{
				
				float $xSpeed = `getAttr ($relatives[0]+".RotXSpeed")`;	
				floatSliderGrp -e -value $xSpeed "rotXSlider";
				
				
				float $ySpeed = `getAttr ($relatives[0]+".RotYSpeed")`;	
				floatSliderGrp -e -value $ySpeed "rotYSlider";
				
				
				float $zSpeed = `getAttr ($relatives[0]+".RotZSpeed")`;	
				floatSliderGrp -e -value $zSpeed "rotZSlider";
				print ("Drift rotation settings recovered.\n");
			}
			
			if ( `attributeQuery -node $relatives[0] -exists "MinCreationRot"` )
			{
				
				float $minRot = `getAttr ($relatives[0]+".MinCreationRot")`;	
				floatSliderGrp -e -value $minRot "rotMinSlider";
				
				
				float $maxRot = `getAttr ($relatives[0]+".MaxCreationRot")`;	
				floatSliderGrp -e -value $maxRot "rotMaxSlider";
				print ("Creation rotation settings recovered.\n");
			}
			
			if ( `attributeQuery -node $relatives[0] -exists "MinRadius"` )
			{
				
				float $minRot = `getAttr ($relatives[0]+".MinRadius")`;	
				floatSliderGrp -e -value $minRot "radiusMinSlider";
				
				
				float $maxRot = `getAttr ($relatives[0]+".MaxRadius")`;	
				floatSliderGrp -e -value $maxRot "radiusMaxSlider";
				print ("radiusPP settings recovered.\n");
			}
			
			if ( `attributeQuery -node $relatives[0] -exists "NumOfFrames"` )
			{
				
				int $minRot = `getAttr ($relatives[0]+".NumOfFrames")`;	
				intSliderGrp -e -value $minRot "startFrameSlider";
				print ("Start Frame settings recovered.\n");
				
			}
			
			if ( `attributeQuery -node $relatives[0] -exists "NumOfObjects"` )
			{
				int $minRot = `getAttr ($relatives[0]+".NumOfObjects")`;	
				intSliderGrp -e -value $minRot "numObjectSlider";
				print ("idPP settings recovered.\n");
				
			}
			
			if ( `attributeQuery -node $relatives[0] -exists "stepSize"` )
			{
				float $stepSize = `getAttr ($relatives[0]+".stepSize")`;	
				floatSliderGrp -e -value $stepSize "stepSizeSlider";
				print ("Step Size settings recovered.\n");
				
			}
			
		}
	}
	
}

global proc setUpGoalsProc () 

{
	string $selectedObjects[ ] = `ls -sl`; 
	string $relatives[] = `listRelatives -shapes $selectedObjects[0]`;
	
	if (size($selectedObjects) < 2) {
		
		error ("First, you need to select the particle transform, then the goal object.");
		
	}
	
	addAttr -ln "CurrentGoal"  -at "float"  $relatives[0];
	//setAttr -e -keyable true ($relatives[0]+".CurrentGoal");
	float $g1cg = 0.5;
	setAttr ($relatives[0]+".CurrentGoal") $g1cg;
	
	addAttr -ln "Goal1Start"  -at long  $relatives[0];
	setAttr -e -keyable true ($relatives[0]+".Goal1Start");
	int $g1s = `intField -query -value goal1StartIntField`;
	setAttr ($relatives[0]+".Goal1Start") $g1s;
	
	addAttr -ln "Goal1End"  -at long  $relatives[0];
	setAttr -e -keyable true ($relatives[0]+".Goal1End");
	int $g1e = `intField -query -value goal1EndIntField`;
	setAttr ($relatives[0]+".Goal1End") $g1e;
	
	addAttr -ln "Goal1Var"  -at double  $relatives[0];
	setAttr -e -keyable true ($relatives[0]+".Goal1Var");
	float $g1v = `floatSliderGrp -q -value "goal1VarSlider"`;
	setAttr ($relatives[0]+".Goal1Var") $g1v;
	
	addAttr -dt "string" -ln "Goal1Object" $relatives[0];
	setAttr ($relatives[0]+".Goal1Object") -type "string" $selectedObjects[1];
	
	string $currentExpression =  `dynExpression -q -rbd $relatives[0]`;
	string $additionalExpression;
	//
	$additionalExpression += "int $currentFrame = `currentTime -q`;\n";
	$additionalExpression += "float $goal1End = Goal1End;\n";
	$additionalExpression += "float $goal1StartFrame = Goal1Start;\n";
	$additionalExpression += "float $goal1Start = Goal1Start/25;\n";
	
	$additionalExpression += "if ($currentFrame == $goal1StartFrame) {\n";
		$additionalExpression += "float $newCurrentGoalValue = CurrentGoal+0.5;\n";
		$additionalExpression += ("setAttr " + $relatives[0] +".CurrentGoal $newCurrentGoalValue;");
		$additionalExpression += "}\n";
	
	$additionalExpression += "if (CurrentGoal == 1) {\n";
		$additionalExpression += "seed (particleId);\n";
		$additionalExpression += "float $randU = rand(4);\n";
		$additionalExpression += "float $randV = rand(8);\n";
		$additionalExpression += ("string $goalName = `getAttr " + $relatives[0] +".Goal1Object`;\n");
		
		
		$additionalExpression += "float $goal1Var = Goal1Var;\n";
		
		$additionalExpression += "vector $newPosition = `pointOnSurface -u $randU -v $randV -position $goalName`;\n";
		
		$additionalExpression += "position=hermite(position,$newPosition,<<3,0,0>>,<<0,0,0>>,smoothstep(rand(($goal1Start-$goal1Var),($goal1Start+$goal1Var)),rand(($goal1Start+2-$goal1Var),($goal1Start+2+$goal1Var)),time));\n";
		
		$additionalExpression += "}\n";
	
	$additionalExpression += "if ($currentFrame == $goal1End) {\n";
		$additionalExpression += "float $newCurrentGoalValue = CurrentGoal+0.5;\n";
		$additionalExpression += ("setAttr " + $relatives[0] +".CurrentGoal $newCurrentGoalValue;");
		$additionalExpression += "}\n";
	
	string $mergedExpression = ($currentExpression + "\n" +  $additionalExpression); 
	dynExpression -s $mergedExpression -rbd $relatives[0];
	
	string $currentExpression =  `dynExpression -q -c $relatives[0]`;
	
	string $additionalExpression = ("setAttr " + $relatives[0] +".CurrentGoal 0.5;\n");
	
	
	string $mergedExpression = $currentExpression + "\n" +  $additionalExpression; 
	
	dynExpression -s $mergedExpression -c $relatives[0];
	
	print "Goal 1 Sucsess! \n";
	
}



setUpUI;
