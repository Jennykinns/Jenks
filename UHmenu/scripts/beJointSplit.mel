/****************************************************************************
Name: Smart JointSpit
Version: 1.0
Purpose: Adds additional joint between a joint chain. Joint Quanity slider
        allows between 1-10 joints. Fieled limit is 50. The joints can be
        splitted with and without an interface. The interface allows
        joints to be positioned using sliders. Source to run.
Issues: Undo while interface is open is not supported. Solution is reload
        start joint and re-create interface.
History: Version 1.0 Aug 30, 2005
Created by: Brian Escribano
Contact: brian@meljunky.com
Visit: meljunky.com

*****************************************************************************/
if (`window -exists beJsWindow`) deleteUI beJsWindow;
window -t "Joint Splitter" beJsWindow;
columnLayout;
rowColumnLayout -nr 6 -rh 1 18 -rh 3 40 -rh 5 20 -rh 6 100 beJsRCL;
        radioButtonGrp -nrb 2 -la2 "Auto-Parent" "Independent" -sl 1 beJsParentRBG;
	button -l "Select Start Joint" -c "beJsSelStartJnt";
	rowColumnLayout -nc 2 -cw 1 115 -cw 2 115;
		text "            Start Joint";
		text "             End Joint";
		textField -ed 0 beJsStartJnt;
		textField -ed 0 beJsEndJnt;
	setParent..;
 	intSliderGrp -label " Jnt Qty:" -field true -cl3 "left" "left" "left" -cw3 49 25 20
 		-minValue 1 -maxValue 10 -fieldMinValue 1 -fieldMaxValue 50 -value 1 beJsJntQty;
        frameLayout -cll 1 -cl 1 -h 200 -en 1 -l "Joint Slider Control" -fn "plainLabelFont"
                        -cc "rowColumnLayout -e -rh 5 20 beJsRCL; window -e -wh 245 190 beJsWindow;"
                        -ec "rowColumnLayout -e -rh 5 120 beJsRCL; window -e -wh 245 290 beJsWindow;"beJsSplitJntFL;
                scrollLayout -horizontalScrollBarThickness 0 -h 200 beJsSplitJntSL;
                        columnLayout -h 200 -columnAttach "left" 5 beJsSplitJntCL;
                        //Sliders Created Here
                        setParent..;
                setParent..;
 	setParent..;
        rowColumnLayout -nc 2 -cw 1 115 -cw 2 115;
		button -l "Split Joints" -c "beJsBeginSplit 1" -en 0 beJsBN;
		button -l  "Create Interface" -c "beJsBeginSplit 2" -en 0 beJsCiBN;
		//These fields are hidden from the viewer used to pass arrays through buttom command
		textScrollList -h 50 -vis 0 beJsJntListTSL;
	setParent..;
setParent..;
setParent..;
scriptJob -uid beJsWindow beJsRemoveNodes;
window -e -wh 245 190 beJsWindow;
showWindow beJsWindow;
global proc beJsBeginSplit (int $type){
button -e -c "beJsBeginSplit 1" beJsBN;
beJsRemoveNodes;
int $error = 0;
string $start = `textField -q -tx beJsStartJnt`;
string $end = `textField -q -tx beJsEndJnt`;
if ($start == ""){
	error "Please select start joint.";
	$error = 1;
}else{
	string $child[] = `listRelatives $start`;
	if ($end != $child[0]){
		error ($end + " is no longer child of " + $start + ". Please select start joint.");
		$error = 1; }
	if ($end == "") {
		error ("No end joint selected");
		$error = 1;}

if ($error == 0){
	if ($type == 1)
		beJsCreateJoints;
	else
		beJsCreateInterface;}
}
}//end proc

//Purpose: Populates Start joint and End Joint Field
global proc beJsSelStartJnt(){
string $child[];
string $sel[] = `ls -sl -type joint`;
if ($sel[0] == "")
        error "Please select start joint.";
else {
        $child = `listRelatives -type joint $sel[0]`;
        if (`nodeType $child[0]` == "joint"){
        textField -e -tx $sel[0] beJsStartJnt;
        textField -e -tx $child[0] beJsEndJnt;
        button -e -en 1 beJsCiBN;
        button -e -en 1 beJsBN;}
        else
        error "Child of start joint is not a joint";
}
}

//joint Spit Now
global proc beJsCreateJoints(){
string $locList[];
string $jntList[];
int $firstJnt;
int $k;
$locList = `beJsCreateLoc 1`;  		//Creates Locators Only
$jntList = `beJsAddJoints $locList`;	//Add Joints Only
beJsParentJnt $jntList `radioButtonGrp -q -sl beJsParentRBG`;			//PArents Joints Only
beJsCleanUp;                   //Cleans up nodes
}//end proc

//Later
global proc beJsCreateInterface(){
string $locList[];
string $jntList[];
string $attrName[];
string $textName[];

$locList = `beJsCreateLoc 2`;  		//Creates Locators Only
$jntList = `beJsAddJoints $locList`;	//Add Joints Only                                      
$textName = `columnLayout -q -ca beJsSplitJntCL`;    //Name takes off "." need label name
for ($i=0;$i<size($textName); $i++){
$attrName[$i] = `text -q -l $textName[$i]`;}
deleteUI $textName;                     //Make room for sliders

for ($i=0; $i< size($locList); $i++){
        textScrollList -e -a $jntList[$i] beJsJntListTSL;
        beJsCreateSlider $jntList[$i] $attrName[$i];}

frameLayout -e -cl 0 beJsSplitJntFL;
rowColumnLayout -e -rh 5 120 beJsRCL;
window -e -wh 245 290 beJsWindow;
button -e -en 0 beJsCiBN;
button -e -c ("beJsParentJnt `textScrollList -q -ai beJsJntListTSL` `radioButtonGrp -q -sl beJsParentRBG`; beJsCleanUp") beJsBN;

}

global proc beJsCreateSlider(string $jntList, string $attrName){
setParent beJsSplitJntCL;
        attrFieldSliderGrp -l $jntList -min 0 -max 1
                -cal 1 left -cal 2 left -cal 3 left -pre 3 -cw 1 65 -cw 2 40 -cw 3 100 -at $attrName;}

global proc beJsParentJnt (string $jntList[], int $type){
if ($type == 1){
string $start = `textField -q -tx beJsStartJnt`;
string $end = `textField -q -tx beJsEndJnt`;
$firstJnt = `size($jntList)`-1;
for ($i=1; $i<size($jntList); $i++){
	$k = $i-1;
	parent $jntList[$k] $jntList[$i];}
parent $jntList[$firstJnt] $start;
parent $end $jntList[0];
}else{
for ($eval in $jntList){
parent -w  $eval; }
}//end else
}

//Joints have not been created
global proc string[] beJsCreateLoc (int $type){
int $qty = `intSliderGrp -q -v beJsJntQty`;
string $start = `textField -q -tx beJsStartJnt`;
string $end = `textField -q -tx beJsEndJnt`;
float $i;
float $sWeight;
float $eWeight;
string $pointName[];
string $locList[];
for ($i=1; $i <= $qty; $i++){
        $locName = `spaceLocator -p 0 0 0 -n ("beJsTempLoc" + $i)`;
        $locList[size($locList)] = $locName[0];
        orientConstraint -offset 0 0 0 -weight 1 $start $locName;
        $sWeight = $i/($qty +1);
        $eWeight = 1 - $sWeight;
        $pointName = `pointConstraint -offset 0 0 0 -weight $sWeight $start $locName`;
        pointConstraint -offset 0 0 0 -weight $eWeight $end $locName;
        if ($type == 2){
	       //create math connection
               beCreateSubstractConnect $pointName[0] $start $end;
        }//end if
}//end for
return $locList;
}//end proc

global proc string[] beJsAddJoints(string $locList[]){
string $start = `textField -q -tx beJsStartJnt`;
string $end = `textField -q -tx beJsEndJnt`;
string $jntName[];
string $jntTempName[];
int $j;
float $radius = (`getAttr ($start + ".radius")` + `getAttr ($end + ".radius")`)/2;
parent -w $end ; //Jnt is dulpicated without parent

for ($i=0; $i<size($locList); $i++){
        $j = $i + 1;

        $jntTempName = `duplicate -rc -n ("split" + $j + "_JNT") $start`;
        $jntName[$i] = $jntTempName[0];
        
        parent $jntName[$i] $locList[$i];
        setAttr ($jntName[$i] + ".translateX") 0;
        setAttr ($jntName[$i] + ".translateY") 0;
        setAttr ($jntName[$i] + ".translateZ") 0;
        setAttr ($jntName[$i] + ".jointOrientX") 0;
        setAttr ($jntName[$i] + ".jointOrientY") 0;
        setAttr ($jntName[$i] + ".jointOrientZ") 0;}//for
parent $end $start;
return $jntName;
}//end proc

global proc beCreateSubstractConnect (string $pointName, string $start, string $end){
string $minusNode;
$minusNode = `shadingNode -asUtility plusMinusAverage -n ($pointName + "_beJsMinus")`;
setAttr ($minusNode + ".operation") 2;
addAttr -ln startPoint -at double  -dv 1 $minusNode;
connectAttr -f ($pointName + "." + $start + "W0") ($minusNode + ".input1D[1]");
connectAttr -f ($minusNode + ".startPoint") ($minusNode + ".input1D[0]");
connectAttr -f ($minusNode + ".output1D") ($pointName + "." + $end + "W1");
setParent beJsSplitJntCL;
        text -l ($pointName + "." + $start + "W0") ($pointName + "." + $start + "W0");}

global proc beJsCleanUp(){
rowColumnLayout -e -rh 5 20 beJsRCL;
window -e -wh 245 190 beJsWindow;
frameLayout -e -cl 1 beJsSplitJntFL;
textScrollList -e -ra beJsJntListTSL;
beJsRemoveNodes;
button -e -c "beJsBeginSplit 1" beJsBN;
button -e  -en 1 beJsCiBN;
}

global proc beJsRemoveNodes(){
//Deletes any sliders that are left over
if (`columnLayout -q -ex beJsSplitJntCL`){
        string $delListUI[] = `columnLayout -q -ca beJsSplitJntCL`;
	for ($delUI in $delListUI){
		deleteUI $delUI;}}
//Deletes any minus nodes that are left over
string $delSubNode[] = `ls  -type plusMinusAverage "beJsTempLoc*"`;
	for ($delSub in $delSubNode){
		delete $delSub;}
//Deletes any locators that are left over 
string $delLocNode[] = `ls -type locator "beJsTempLoc*"`;
	for ($delLoc in $delLocNode){
		delete `listRelatives -s -p $delLoc`;}
}