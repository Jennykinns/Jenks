{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"asset",
				"assetName\tstatement"
			],
			[
				"assetN",
				"assetNameSetup\tfunction"
			],
			[
				"fileDa",
				"fileDialogFilter"
			],
			[
				"i_mer",
				"i_mergeSubAsset"
			],
			[
				"i_refSubA",
				"i_refSubAssetLookdev"
			],
			[
				"subA",
				"SubAsset"
			],
			[
				"select",
				"selectionOnly"
			],
			[
				"remove",
				"removeRefs"
			],
			[
				"subAsse",
				"subAssetName"
			],
			[
				"geoSe",
				"geoSetName"
			],
			[
				"subAss",
				"subAssetName"
			],
			[
				"i_publishSub",
				"i_publishSubAssetLookdev"
			],
			[
				"i_saveSub",
				"i_saveSubAssetGeo"
			],
			[
				"i_import",
				"i_importSubAssetGeo"
			],
			[
				"i_refSu",
				"i_refSubAssetGeo"
			],
			[
				"i_p",
				"i_publishLookdev"
			],
			[
				"setS",
				"setSubAssetName"
			],
			[
				"getSub",
				"getSubAssetDir"
			],
			[
				"dir",
				"directory"
			],
			[
				"create",
				"createNewDirs"
			],
			[
				"mod",
				"modifyShape"
			],
			[
				"C_",
				"C_hat_JNT"
			],
			[
				"tex",
				"textPrompt\tFalse"
			],
			[
				"text",
				"textPrompt"
			],
			[
				"assetName",
				"assetNamePrompt"
			],
			[
				"assetNamePrompt",
				"assetNamePromptCommand"
			],
			[
				"rigSt",
				"rigScripts"
			],
			[
				"getAs",
				"getAssetDir\tfunction"
			],
			[
				"digits",
				"digitCtrls"
			],
			[
				"bendy",
				"bendyCtrl\tstatement"
			],
			[
				"endCluGrp",
				"endCluGrpTrans\tstatement"
			],
			[
				"endC",
				"endCtrl\tparam"
			],
			[
				"endClu",
				"endCluGrpTrans\tstatement"
			],
			[
				"endCluGrpOrient",
				"endCluGrpOrientYZ\tstatement"
			],
			[
				"endCl",
				"endCluGrpTrans\tstatement"
			],
			[
				"BendyEnd",
				"BendyEndCluOrient"
			],
			[
				"bend",
				"bendyName\tparam"
			],
			[
				"module",
				"moduleType\tparam"
			],
			[
				"modul",
				"moduleType\tparam"
			],
			[
				"parent",
				"parentConstraint\tfunction"
			],
			[
				"PROJE",
				"PROJECT_NAME"
			],
			[
				"CMAKE_CURRENT",
				"CMAKE_CURRENT_SOURCE_DIR"
			],
			[
				"endF",
				"endfunction"
			],
			[
				"FindPackage",
				"FindPackageHandleStandardArgs"
			],
			[
				"mjRivet_ex",
				"mjRivet_EXTRA_LFLAGS"
			],
			[
				"DEV",
				"DEVKIT_LOCATION"
			],
			[
				"outIKTra",
				"outIKTransX"
			],
			[
				"soft",
				"softDist"
			],
			[
				"inp",
				"inputValue"
			],
			[
				"in",
				"inputValue"
			],
			[
				"outIK",
				"outIKTransX"
			],
			[
				"sof",
				"softAttr"
			],
			[
				"ctrl",
				"ctrlLocMat"
			],
			[
				"kD",
				"kDouble\tstatement"
			],
			[
				"deform",
				"deformUserNormals"
			],
			[
				"get",
				"getLatestVersion\tfunction"
			],
			[
				"no",
				"noPath\tparam"
			],
			[
				"reanm",
				"renameHeadGuides\tfunction"
			],
			[
				"re",
				"replace_Ledit\tstatement"
			],
			[
				"setCurre",
				"setCurrentText\tfunction"
			],
			[
				"renam",
				"renameVal"
			],
			[
				"suffi",
				"suffixDictionary\tmodule"
			],
			[
				"magical",
				"magicalRenamerUI\tmodule"
			],
			[
				"skip",
				"skipNum\tFalse"
			],
			[
				"def",
				"defaultVal\t0"
			],
			[
				"skin",
				"skinCrvIn\tstatement"
			],
			[
				"dynS",
				"dynSwitchRev"
			],
			[
				"max",
				"maxVal\tparam"
			],
			[
				"del",
				"deleteGuide\tFalse"
			],
			[
				"dyn",
				"dynOutCrv\tstatement"
			],
			[
				"blend",
				"blendShape\tfunction"
			],
			[
				"skinCr",
				"skinCrvIn\tstatement"
			],
			[
				"du",
				"dynOutCrvShape\tstatement"
			],
			[
				"list",
				"listRelatives\tfunction"
			],
			[
				"_skin",
				"_skinLayerDyn"
			],
			[
				"has",
				"hashToNumber\tfunction"
			],
			[
				"obj",
				"objType\tstatement"
			],
			[
				"ap",
				"apiFn\tmodule"
			],
			[
				"file",
				"fileOverride\tparam"
			],
			[
				"cla",
				"clavFKCtrl\tstatement"
			],
			[
				"spine",
				"spineSkin\tstatement"
			],
			[
				"c",
				"ctrlEnd\tstatement"
			],
			[
				"exampleRampA",
				"exampleRampAttribute_EXTRA_INCLUDES"
			],
			[
				"Inclu",
				"IncludePath"
			],
			[
				"autoClav",
				"autoClavClavIK\tstatement"
			],
			[
				"add",
				"addAttr"
			],
			[
				"pv",
				"pvCtrl"
			],
			[
				"paernt",
				"parentConstraint\tfunction"
			],
			[
				"pole",
				"polevector"
			],
			[
				"hand",
				"handIKCtrl"
			],
			[
				"dupeArm",
				"dupeArmJnts\tstatement"
			],
			[
				"dupeA",
				"dupeArmJnts"
			],
			[
				"auto",
				"autoClav"
			],
			[
				"aut",
				"autoclav"
			],
			[
				"new",
				"newNameSpace\tfunction"
			],
			[
				"asse",
				"assetName\tstatement"
			],
			[
				"men",
				"menuItem"
			],
			[
				"glo",
				"globalCtrl\tstatement"
			],
			[
				"gl",
				"globalCtrl\tstatement"
			],
			[
				"glob",
				"globalCtrl"
			],
			[
				"rig",
				"rigConnection"
			],
			[
				"ikf",
				"ikfkMechanics\tfunction"
			],
			[
				"rigC",
				"rigConnectAttr"
			],
			[
				"df",
				"defaultVal"
			],
			[
				"xf",
				"xformFirstObj\tstatement"
			],
			[
				"xfo",
				"xformFirstObj"
			],
			[
				"x",
				"xformThirdObj\tstatement"
			],
			[
				"xfr",
				"xformSecondObj\tstatement"
			],
			[
				"cross",
				"crossProductResult\tstatement"
			],
			[
				"base",
				"baseJnt\tstatement"
			],
			[
				"midLa",
				"midLayerCtrls\tstatement"
			],
			[
				"midC",
				"midCtrlParent\tstatement"
			],
			[
				"baseC",
				"baseCtrlParent\tstatement"
			],
			[
				"baseLa",
				"baseLayerCtrls\tstatement"
			],
			[
				"ad",
				"advancedTwist\tfunction"
			],
			[
				"ski",
				"skinIKSpline\tstatement"
			],
			[
				"ctr",
				"ctrlEnd\tstatement"
			],
			[
				"scla",
				"scale\t(1, 1, 1)"
			],
			[
				"sca",
				"scale\t(1, 1, 1)"
			],
			[
				"baseLay",
				"baseLayerLocs\tstatement"
			],
			[
				"cros",
				"crossProductResult\tstatement"
			],
			[
				"up",
				"upDirRecalculated\tstatement"
			],
			[
				"extra",
				"extraName\tstatement"
			],
			[
				"mid",
				"midCtrl\tstatement"
			],
			[
				"pip",
				"pipeMenuLoc"
			],
			[
				"getAss",
				"getAssetName\tfunction"
			],
			[
				"Palm",
				"PalmGuide"
			],
			[
				"suffix",
				"suffixOverride\t''"
			]
		]
	},
	"buffers":
	[
		{
			"file": "rigModules/bodyFunctions.py",
			"settings":
			{
				"buffer_size": 86499,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "import os\nimport json\nimport sys\nimport maya.cmds as cmds\nimport maya.mel as mel\n\nfrom Jenks.scripts.rigModules import utilityFunctions as utils\nfrom Jenks.scripts.rigModules import apiFunctions as api\nfrom Jenks.scripts.rigModules.suffixDictionary import suffix\n\ndef getLatestVersion(assetName, path, location, new=False, name=None, suffix=None, img=False):\n    if location == 'rig/Published':\n        suffix = 'ma'\n        name = assetName\n    elif location == 'rig/WIP/guides':\n        suffix = 'ma'\n        name = 'guides'\n    elif location == 'rig/WIP/skin':\n        suffix = 'skin'\n    elif location == 'rig/WIP/controlShapes':\n        suffix = 'shape'\n    elif location == 'model/Published':\n        suffix = 'abc'\n        name = assetName\n    elif location == 'model/WIP':\n        suffix = 'ma'\n        name = assetName\n    elif location == 'anim/Published':\n        suffix = 'abc'\n        name = assetName\n    else:\n        suffix = 'ma'\n        name = assetName\n    if img:\n        suffix = 'jpg'\n    fileDirectory = '{}{}/{}/'.format(path, assetName, location)\n    # ls = os.listdir(fileDirectory)\n    ls = [f for f in os.listdir(fileDirectory) if os.path.isfile('{}/{}'.format(fileDirectory, f))]\n    relevantFiles = []\n    for each in sorted(ls):\n        lsGeo = each.rsplit('_', 1 if not location == 'model/Published' else 2)[0]\n        if lsGeo == name:\n            relevantFiles.append(each)\n    if new:\n        if not relevantFiles:\n            newFile = '{}{}_v001.{}'.format(fileDirectory, name, suffix)\n        else:\n            nameWithoutSuffix = relevantFiles[-1].rsplit('.')[0]\n            latestNum = nameWithoutSuffix.rsplit('_', 1)[1].strip('v')\n            newNum = str(int(latestNum)+1).zfill(3)\n\n            newFile = '{}{}_v{}.{}'.format(fileDirectory, name, newNum, suffix)\n    else:\n        if not relevantFiles:\n            return False\n        else:\n            newFile = '{}{}'.format(fileDirectory, relevantFiles[-1])\n    return newFile\n\ndef newNameSpace(assetName):\n    ns = '{}'.format(assetName)\n    i = 1\n    while cmds.namespace(ex=ns):\n        i += 1\n        ns = '{}{}'.format(assetName, str(i).zfill(2))\n    return ns\n\ndef loadPlugin(nodeName, python=False):\n    if python:\n        fileType = '.py'\n    else:\n        if sys.platform == \"linux\" or sys.platform == \"linux2\":\n           # linux\n           fileType = '.so'\n        elif sys.platform == \"darwin\":\n           # MAC OS X\n           fileType = '.bundle'\n        elif sys.platform == \"win32\" or sys.platform == \"win64\":\n           # Windows\n           fileType = '.mll'\n    loadedPlugins = cmds.pluginInfo(q=1, listPlugins=1)\n    if nodeName in loadedPlugins:\n        cmds.unloadPlugin('{}{}'.format(nodeName, fileType))\n        cmds.flushUndo()\n    pluginPath = '{}/Jenks/scripts/nodes'.format(getScriptDir())\n    cmds.loadPlugin(r'{}/{}{}'.format(pluginPath, nodeName, fileType))\n    mel.eval(\"refreshEditorTemplates; refreshAE;\")\n\ndef loadAllPlugins():\n    loadPlugin('mjStretchArray')\n    loadPlugin('mjRivet')\n    loadPlugin('mjSoftIK', True)\n\n\ndef getScriptDir():\n    ## MIGHT NEED CHANGING - not sure if the path list will be\n    ## consistant between pcs (or even restarts)\n    homeDir = os.environ['HOME']\n    if os.path.isfile('C:\\\\Docs\\\\readMe.txt'):\n        ## on uni computers\n        scriptPath = 'C:\\\\Docs\\\\maya\\\\scripts'\n    elif os.path.isdir('{}\\\\maya'.format(homeDir)):\n        ## on other computers\n        scriptPath = '{}\\\\maya'.format(homeDir)\n    else:\n        scriptPath = sys.path[-1]\n    return scriptPath\n\ndef getAssetDir():\n    path = cmds.workspace(q=1, rd=1)\n    return '{}assets/'.format(path)\n\ndef getSubAssetDir():\n    assetNameSetup(None, False)\n    assetName = getAssetName()\n    path = cmds.workspace(q=1, rd=1)\n    return '{}assets/{}/subAssets/'.format(path, assetName)\n\ndef getShotDir():\n    path = cmds.workspace(q=1, rd=1)\n    return '{}shots/'.format(path)\n\ndef newScene():\n    if cmds.file(q=1, modified=1):\n        t = 'Opening New Scene'\n        m = 'This will override the current scene without saving. Save Now?'\n        confirm = cmds.confirmDialog(t=t, m=m, b=['Yes', 'No', 'Cancel'], db='Yes',\n                                     cb='Cancel', ds='Yes')\n        if confirm == 'Yes':\n            saveMayaFile()\n        elif confirm == 'Cancel':\n            return False\n    f = cmds.file(new=1, force=1)\n    return True\n\ndef abcExport(fileName, selection=True, frameRange=(1, 1), step=1.0):\n    if not frameRange == (1, 1):\n        frameRange = (frameRange[0]-3, frameRange[1]+3)\n    if selection:\n        sel = cmds.ls(sl=True)\n    else:\n        a = cmds.ls(dag=1, v=1)\n        b = cmds.ls(lights=1, cameras=1)\n        sel = list(set(a)-set(b))\n    args = '-f {0} -fr {1[0]} {1[1]} -uv -ws -wv -ef -wuvs -wc'.format(fileName, frameRange, sel)\n    if not frameRange ==  (1, 1):\n        args = '{} -s {}'.format(args, step)\n    for each in sel:\n        args = '{} -rt {}'.format(args, each)\n    cmds.AbcExport(j=args)\n\ndef loadGuides(assetName=None, prompt=False, new=False, latest=True):\n    loadMayaFile(assetName, typ='rig/WIP/guides', prompt=prompt, new=new, latest=latest)\n    return True\n\ndef saveGuides(assetName=None, autoName=False, prompt=False):\n    saveMayaFile(assetName, typ='rig/WIP/guides', prompt=prompt, autoName=autoName,\n                 removeRefs=True)\n    return True\n\ndef publishRig(assetName=None, autoName=True, prompt=False):\n    assetName = assetNameSetup(assetName, prompt)\n    if not assetName:\n        return False\n    removeReferences()\n    cmds.select('_RIG__GRP')\n    publishSnapshot(asset=assetName, typ='rig')\n    saveMayaFile(assetName, typ='rig/Published', prompt=prompt, autoName=autoName,\n                 selectionOnly=True)\n    return True\n\ndef referenceRig(assetName=None, prompt=False, replace=False, refNd=None):\n    assetName = assetNameSetup(assetName, prompt)\n    if not assetName:\n        return False\n    path = getAssetDir()\n    fileName = getLatestVersion(assetName, path, 'rig/Published')\n    if not replace:\n        cmds.file(fileName, r=1, ns=newNameSpace(assetName))\n    else:\n        cmds.file(fileName, lr=refNd)\n    # print 'Referenced Rig: {}'.format(fileName)\n    printToMaya('Referenced Rig: {}'.format(fileName))\n    return True\n\ndef loadWipRig(assetName=None, latest=False, prompt=False):\n    loadMayaFile(assetName, typ='rig/WIP', prompt=prompt, latest=latest)\n    return True\n\ndef saveWipRig(assetName=None, autoName=False, prompt=False):\n    saveMayaFile(assetName, typ='rig/WIP', prompt=prompt, autoName=autoName)\n    return True\n\ndef loadRigScript(assetName=None, prompt=False, build=False):\n    assetName = assetNameSetup(assetName, prompt)\n    if not assetName:\n        return False\n    path = getAssetDir()\n    fileName = '{}rigScripts/{}.py'.format(path, assetName)\n    # print 'Loading rig script: {}'.format(fileName)\n    printToMaya('Loading Rig Script: {}'.format(fileName))\n    f = open(fileName, 'r')\n    rigScriptTxt = f.read()\n    f.close()\n    cmds.ScriptEditor()\n    gCommandExecuterTabs = mel.eval('$v = $gCommandExecuterTabs')\n    tabLabels = cmds.tabLayout(gCommandExecuterTabs, q=1, tl=1)\n    tabIDs = cmds.tabLayout(gCommandExecuterTabs, q=1, ca=1)\n    create = True\n    for i, each in enumerate(tabLabels, start=1):\n        if '{}_rig'.format(assetName) == each:\n            create = False\n            cmds.tabLayout(gCommandExecuterTabs, e=1, sti=i)\n            rigTab = i\n    if create:\n        mel.eval('buildNewExecuterTab -1  \"{}_rig\"  \"python\" 1'.format(assetName))\n        numOfTabs = cmds.tabLayout(gCommandExecuterTabs, q=1, nch=1)\n        cmds.tabLayout(gCommandExecuterTabs, e=1,  selectTabIndex=numOfTabs)\n        rigTab = numOfTabs\n    executer = mel.eval('$a=$gCommandExecuter;')[rigTab-1]\n    cmds.cmdScrollFieldExecuter(executer, e=1, t=rigScriptTxt, exc=build, sla=1)\n\n\ndef loadGeo(assetName=None, group=None, prompt=False, abc=True):\n    assetName = assetNameSetup(assetName, prompt)\n    if not assetName:\n        return False\n    path = getAssetDir()\n    fileName = getLatestVersion(assetName, path, 'model/Published')\n    if abc:\n        if group:\n            cmds.AbcImport(fileName, mode='import', rpr=group)\n        else:\n            cmds.AbcImport(fileName, mode='import')\n    else:\n        nodes = cmds.file(fileName, i=1, dns=1, type='mayaAscii', rnn=1)\n        mNodes = []\n        for each in nodes:\n            mNodes.append(api.getMObj(each))\n        if group:\n            for each in mNodes:\n                lN, sN = api.getPath(each)\n                if cmds.nodeType(lN) == 'transform':\n                    cmds.parent(lN, group)\n    # print 'Loaded geometry: {}'.format(fileName)\n    printToMaya('Loaded Geometry: {}'.format(fileName))\n    return True\n\ndef publishGeo(assetName=None, autoName=True, prompt=False, abc=True):\n    assetName = assetNameSetup(assetName, prompt)\n    if not assetName:\n        return False\n    path = getAssetDir()\n    publishSnapshot(asset=assetName, typ='model')\n    if abc:\n        if not autoName:\n            fileFilter = fileDialogFilter([('Alembic Cache', '*.abc')])\n            fileName = cmds.fileDialog2(dialogStyle=2, caption='Publish Geometry',\n                                        fileMode=0, fileFilter=fileFilter,\n                                        dir='{}{}/model/Published'.format(path, assetName))\n            if fileName:\n                fileName = fileName[0]\n            else:\n                return False\n        else:\n            fileName = getLatestVersion(assetName, path, 'model/Published', new=True)\n        # removeReferences()\n        importReferences()\n        abcExport(fileName, selection=True, frameRange=(1, 1))\n        # print 'Published Geometry: {}'.format(fileName)\n        printToMaya('Published Geometry: {}'.format(fileName))\n    else:\n        saveMayaFile(assetName, typ='model/Published', autoName=autoName, removeRefs=True,\n                     selectionOnly=True)\n        # print 'Saved as Maya File.'\n        printToMaya('Published Geometry as Maya File: {}'.format(fileName))\n    return True\n\ndef referenceGeo(assetName=None, prompt=False):\n    assetName = assetNameSetup(assetName, prompt)\n    if not assetName:\n        return False\n    path = getAssetDir()\n    fileName = getLatestVersion(assetName, path, 'model/Published')\n    cmds.file(fileName, r=1, ns=newNameSpace(assetName))\n    # print 'Referenced geometry: {}'.format(fileName)\n    printToMaya('Referenced Geometry: {}'.format(fileName))\n    return True\n\ndef saveWipGeo(assetName=None, autoName=False, prompt=False):\n    saveMayaFile(assetName, typ='model/WIP', prompt=prompt, autoName=autoName,\n                 removeRefs=False)\n    return True\n\ndef loadWipGeo(assetName=None, latest=False, prompt=False):\n    loadMayaFile(assetName, typ='model/WIP', prompt=prompt, latest=latest, new=True)\n    return True\n\ndef loadSubAssetGeo(subAssetName=None, group=None, prompt=False, abc=True):\n    subAssetName = assetNameSetup(subAssetName, prompt, typ='subAsset')\n    if not subAssetName:\n        return False\n    path = getSubAssetDir()\n    fileName = getLatestVersion(subAssetName, path, 'model/Published')\n    if abc:\n        if group:\n            cmds.AbcImport(fileName, mode='import', rpr=group)\n        else:\n            cmds.AbcImport(fileName, mode='import')\n    else:\n        nodes = cmds.file(fileName, i=1, dns=1, type='mayaAscii', rnn=1)\n        if group:\n            mNodes = []\n            for each in nodes:\n                mNodes.append(api.getMObj(each))\n            for each in mNodes:\n                lN, sN = api.getPath(each)\n                if cmds.nodeType(lN) == 'transform':\n                    cmds.parent(lN, group)\n    # print 'Loaded SubAsset geometry: {}'.format(fileName)\n    printToMaya('Loaded SubAsset Geometry: {}'.format(fileName))\n    return True\n\ndef publishSubAssetGeo(subAssetName=None, autoName=True, prompt=False, abc=True):\n    subAssetName = assetNameSetup(subAssetName, prompt, typ='subAsset')\n    if not subAssetName:\n        return False\n    path = getSubAssetDir()\n    if abc:\n        if not autoName:\n            fileFilter = fileDialogFilter([('Alembic Cache', '*.abc')])\n            fileName = cmds.fileDialog2(dialogStyle=2, caption='Publish SubAsset Geometry',\n                                        fileMode=0, fileFilter=fileFilter,\n                                        dir='{}{}/model/Published'.format(path, subAssetName))\n            if fileName:\n                fileName = fileName[0]\n            else:\n                return False\n        else:\n            fileName = getLatestVersion(subAssetName, path, 'model/Published', new=True)\n        removeReferences()\n        abcExport(fileName, selection=True, frameRange=(1, 1))\n        # print 'Published Geometry: {}'.format(fileName)\n        printToMaya('Published SubAsset Geometry: {}'.format(fileName))\n    # else:\n    #     saveMayaFile(subAssetName, typ='model/Published', autoName=autoName, removeRefs=True,\n    #                  selectionOnly=True)\n    #     print 'Saved as Maya File.'\n    # publishSnapshot(asset=assetName, typ='model')\n    return True\n\ndef referenceSubAssetGeo(subAssetName=None, prompt=False):\n    subAssetName = assetNameSetup(subAssetName, prompt, typ='subAsset')\n    if not subAssetName:\n        return False\n    path = getSubAssetDir()\n    fileName = getLatestVersion(subAssetName, path, 'model/Published')\n    cmds.file(fileName, r=1, ns=newNameSpace(subAssetName))\n    # print 'Referenced geometry: {}'.format(fileName)\n    printToMaya('Referenced SubAsset Geometry: {}'.format(fileName))\n    return True\n\ndef saveSubAssetWipGeo(subAssetName=None, autoName=False, prompt=False):\n    saveMayaFile(subAssetName, typ='model/WIP', prompt=prompt, autoName=autoName,\n                 removeRefs=True, subAsset=True)\n    return True\n\ndef loadSubAssetWipGeo(subAssetName=None, latest=False, prompt=False):\n    loadMayaFile(subAssetName, typ='model/WIP', prompt=prompt, latest=latest, new=True,\n                 subAsset=True)\n    return True\n\ndef setupLookDevScene(assetName=None, prompt=False):\n    assetName = assetNameSetup(assetName, prompt)\n    if not assetName:\n        return False\n    geoGrp = utils.newNode('group', name='geometry', skipNum=True)\n    loadGeo(assetName, geoGrp.name)\n    print '## ADD A QUICK FUNCTION TO AVOID NAMING CONFLICTS FOR LOOKDEV MESH SET NAMES'\n    geoSetName = 'geoSet_{}'.format(assetName)\n    i = 1\n    while cmds.objExists(geoSetName):\n        i += 1\n        geoSetName = '{}{}'.format(geoSetName, str(i).zfill(2))\n    geo = cmds.listRelatives(geoGrp.name, c=1)\n    setName = cmds.sets(geo, n=geoSetName)\n    geoSetAttrs = {\n        'aiMatte' : ('bool', None),\n        'primaryVisibility' : ('bool', None),\n        'aiSubdivIterations' : ('enum', '0:1:2:3:4:5:6:7'),\n        'aiSubdivType' : ('enum', 'None:Catclark:Linear'),\n    }\n    for k, v in geoSetAttrs.iteritems():\n        if not v[1]:\n            cmds.addAttr(setName, longName=k, attributeType=v[0])\n        else:\n            cmds.addAttr(setName, longName=k, attributeType=v[0], enumName=v[1])\n\n    subAssets = cmds.listRelatives(geoGrp.name, c=1)\n    saGrps = cmds.ls('*_sa_*', typ='transform')\n    for each in saGrps:\n        if each in subAssets:\n            if cmds.objExists(each):\n                subAssetNameWithSuff = each[5:]\n                for suff in suffix.values():\n                    subAssetName = subAssetNameWithSuff.rpartition(suff)[0]\n                    if not subAssetName == '':\n                        break\n                refNds = referenceSubAssetLookDev(subAssetName)\n                saGeo = cmds.listRelatives(refNds, c=1, ad=1, typ='transform')\n                refGrp = cmds.listRelatives(saGeo, p=1)\n                cmds.sets(saGeo, e=1, include=setName)\n                cmds.parent(refGrp, geoGrp.name)\n                cmds.delete(each)\n                mergeSubAssetAlembic(assetName)\n                cmds.select(refGrp)\n                importReferences()\n                cmds.namespace(rm=subAssetName, mnr=1)\n    cmds.select(cl=1)\n    printToMaya('LookDev Scene setup complete for {}.'.format(assetName))\n\n\n\n\ndef setupSubAssetLookDevScene(subAssetName=None, prompt=False):\n    subAssetName = assetNameSetup(subAssetName, prompt, typ='subAsset')\n    if not subAssetName:\n        return False\n    # geoGrp = utils.newNode('group', name=subAssetName, skipNum=True)\n    loadSubAssetGeo(subAssetName)\n\n\ndef saveWipLookDev(assetName=None, autoName=False, prompt=False):\n    saveMayaFile(assetName, typ='lookDev/WIP', prompt=prompt, autoName=autoName,\n                 removeRefs=True)\n    return True\n\ndef loadWipLookDev(assetName=None, latest=False, prompt=False):\n    loadMayaFile(assetName, typ='lookDev/WIP', prompt=prompt, latest=latest, new=True)\n    return True\n\ndef saveSubAssetWipLookDev(subAssetName=None, autoName=False, prompt=False):\n    saveMayaFile(subAssetName, typ='lookDev/WIP', prompt=prompt, autoName=autoName,\n                 removeRefs=True, subAsset=True)\n    return True\n\ndef loadSubAssetWipLookDev(subAssetName=None, latest=False, prompt=False):\n    loadMayaFile(subAssetName, typ='lookDev/WIP', prompt=prompt, latest=latest, new=True,\n                 subAsset=True)\n    return True\n\ndef publishLookDev(assetName=None, autoName=True, prompt=False):\n    assetName = assetNameSetup(assetName, prompt)\n    if not assetName:\n        return False\n    publishSnapshot(asset=assetName, typ='lookDev')\n    setsToSave = []\n    for each in cmds.listRelatives('C_geometry_GRP', c=1, ad=1):\n        sets = cmds.listSets(o=each)\n        if sets:\n            setsToSave.extend(cmds.listSets(o=each))\n    cmds.select(setsToSave, add=1, noExpand=1)\n    saveMayaFile(assetName, typ='lookDev/Published', prompt=prompt, autoName=autoName,\n                 removeRefs=True, selectionOnly=True)\n    return True\n\ndef publishSubAssetLookDev(subAssetName=None, autoName=True, prompt=False):\n    subAssetName = assetNameSetup(subAssetName, prompt, typ='subAsset')\n    if not subAssetName:\n        return False\n    geo = cmds.listRelatives('C_sa_{}_GRP'.format(subAssetName), c=1)\n    cmds.select(geo)\n    saveMayaFile(subAssetName, typ='lookDev/Published', prompt=prompt, autoName=autoName,\n                 removeRefs=True, selectionOnly=True, subAsset=True)\n    return True\n\ndef referenceLookDev(assetName=None, prompt=False):\n    assetName = assetNameSetup(assetName, prompt)\n    if not assetName:\n        return False\n    path = getAssetDir()\n    fileName = getLatestVersion(assetName, path, 'lookDev/Published')\n    cmds.file(fileName, r=1, ns=newNameSpace(assetName))\n    # print 'Referenced LookDev: {}'.format(fileName)\n    printToMaya('Referenced LookDev: {}'.format(fileName))\n    return True\n\ndef referenceSubAssetLookDev(subAssetName=None, prompt=False):\n    subAssetName = assetNameSetup(subAssetName, prompt, typ='subAsset')\n    if not subAssetName:\n        return False\n    path = getSubAssetDir()\n    fileName = getLatestVersion(subAssetName, path, 'lookDev/Published')\n    nds = cmds.file(fileName, r=1, ns=newNameSpace(subAssetName), rnn=1)\n    # print 'Referenced SubAsset LookDev: {}'.format(fileName)\n    printToMaya('Referenced SubAsset LookDev: {}'.format(fileName))\n    return nds\n\ndef mergeSubAssetAlembic(assetName=None, latest=True, prompt=False):\n    assetName = assetNameSetup(assetName, prompt)\n    if not assetName:\n        return False\n    path = getAssetDir()\n    if latest:\n        fileName = getLatestVersion(assetName, path, 'model/Published')\n    else:\n        fileFilter = fileDialogFilter(['Alembic Cache', '*.abc'])\n        fileName = cmds.fileDialog2(dialogStyle=2,\n                                    caption='Merge SubAsset Alembic',\n                                    fileMode=1,\n                                    fileFilter=fileFilter,\n                                    dir='{}{}/model/Published'.format(path, assetName))\n        fileName = fileName[0] if fileName else False\n    mel.eval('AbcImport -mode import -connect \"/\" \"{}\"'.format(fileName))\n\n\ndef saveWipAnimation(shotName=None, autoName=False, prompt=False):\n    saveMayaFile(shotName, typ='anim/WIP', prompt=prompt, autoName=autoName,\n                 removeRefs=False, shot=True)\n    return True\n\ndef loadWipAnimation(shotName=None, latest=False, prompt=False):\n    loadMayaFile(shotName, typ='anim/WIP', prompt=prompt, latest=latest, new=True, shot=True)\n    return True\n\ndef publishAnimation(shotName=None, autoName=True, prompt=False):\n    rigs = cmds.ls('*:_RIG__GRP')\n    cmds.select(cl=True)\n    for each in rigs:\n        rigChilds = cmds.listRelatives(each, c=1, s=0)\n        for child in rigChilds:\n            if ':C_geometry_GRP' in child:\n                cmds.select(child, add=1)\n                continue\n    shotName = assetNameSetup(shotName, prompt, typ='shot')\n    if not shotName:\n        return False\n    path = getShotDir()\n    if not autoName:\n        fileFilter = fileDialogFilter([('Alembic Cache', '*.abc')])\n        fileName = cmds.fileDialog2(dialogStyle=2, caption='Publish Animation',\n                                    fileMode=0, fileFilter=fileFilter,\n                                    dir='{}{}/anim/Published'.format(path, shotName))\n        if fileName:\n            fileName = fileName[0]\n        else:\n            return False\n    else:\n        fileName = getLatestVersion(shotName, path, 'anim/Published', new=True)\n    # playBackSlider = mel.eval('$tmpVar=$gPlayBackSlider')\n    # frameRange = cmds.timeControl(playBackSlider, q=1, ra=1)\n    publishSnapshot(shot=shotName, typ='anim')\n    frameRange = (cmds.playbackOptions(q=1, min=1), cmds.playbackOptions(q=1, max=1))\n    abcExport(fileName, selection=True, frameRange=frameRange)\n    # print 'Published Animation: {}'.format(fileName)\n    printToMaya('Published Animation: {}'.format(fileName))\n\ndef mergeAnimationAlembic(shotName=None, latest=True, prompt=False):\n    shotName = assetNameSetup(shotName, prompt, typ='shot')\n    if not shotName:\n        return False\n    path = getShotDir()\n    if latest:\n        fileName = getLatestVersion(shotName, path, 'anim/Published')\n    else:\n        fileFilter = fileDialogFilter([('Alembic Cache', '*.abc')])\n        fileName = cmds.fileDialog2(dialogStyle=2,\n                                    caption='Merge Published Animation',\n                                    fileMode=1,\n                                    fileFilter=fileFilter,\n                                    dir='{}{}/anim/Published'.format(path, shotName))\n        fileName = fileName[0] if fileName else False\n    mel.eval('AbcImport -mode import -connect \"/\" \"{}\"'.format(fileName))\n\ndef saveWipLighting(shotName=None, autoName=False, prompt=False):\n    saveMayaFile(shotName, typ='lighting/WIP', prompt=prompt, autoName=autoName,\n                 removeRefs=False, shot=True)\n    return True\n\ndef loadWipLighting(shotName=None, latest=False, prompt=False):\n    loadMayaFile(shotName, typ='lighting/WIP', prompt=prompt, latest=latest, new=True, shot=True)\n    return True\n\ndef publishLighting(shotName=None, autoName=True, prompt=False):\n    publishSnapshot(shot=shotName, typ='lighting')\n    saveMayaFile(shotName, typ='lighting/Published', prompt=prompt, autoName=autoName,\n                 removeRefs=False, shot=True)\n    return True\n\ndef setupSceneForRender(shotName=None, latest=True, prompt=False):\n    newScene()\n    shotName = assetNameSetup(shotName, prompt, typ='shot')\n    if not shotName:\n        return False\n    path = getShotDir()\n    fileName = getLatestVersion(shotName, path, 'lighting/Published')\n    cmds.file(fileName, r=1, ns=newNameSpace(shotName))\n    # print 'Referenced Lighting: {}'.format(fileName)\n    printToMaya('Referenced Lighting: {}'.format(fileName))\n    print '## DO OTHER STUFF FOR SETTING UP THE RENDER - aov\\'s, render settings, etc.'\n\n\ndef publishSnapshot(asset=None, shot=None, typ=''):\n    if asset:\n        path = getAssetDir()\n        fileName = getLatestVersion(asset, path, typ, new=True, img=True)\n    elif shot:\n        path = getShotDir()\n        fileName = getLatestVersion(shot, path, typ, new=True, img=True)\n    else:\n        return False\n\n    oldSel = cmds.ls(sl=1, l=1)\n    cmds.select(cl=True)\n    ssao = cmds.getAttr('hardwareRenderingGlobals.ssaoEnable')\n    multiSample = cmds.getAttr('hardwareRenderingGlobals.multiSampleEnable')\n    cmds.setAttr('hardwareRenderingGlobals.ssaoEnable', 1)\n    cmds.setAttr('hardwareRenderingGlobals.multiSampleEnable', 1)\n\n    cmds.playblast(format='image', cf=fileName,\n                   fr=1, percent=100, compression='jpg', quality=100, widthHeight=(1920, 1080),\n                   fp=False, orn=False, v=False)\n\n    print 'Snapshot image saved to: {}'.format(fileName)\n\n    cmds.setAttr('hardwareRenderingGlobals.ssaoEnable', ssao)\n    cmds.setAttr('hardwareRenderingGlobals.multiSampleEnable', multiSample)\n\n    cmds.select(oldSel)\n\n    return True\n\n\ndef removeReferences():\n    refs = cmds.ls(typ='reference')\n    if refs:\n        for each in refs:\n            cmds.file(rr=1, rfn=each)\n\ndef importReferences(sel=True):\n    refs = []\n    for each in cmds.ls(sl=sel):\n        if cmds.referenceQuery(each, inr=1) and cmds.referenceQuery(each, rfn=1) not in refs:\n            refs.append(cmds.referenceQuery(each, rfn=1))\n    oldSel = cmds.ls(sl=1)\n    if refs:\n        for each in refs:\n            if cmds.objExists(each):\n                refFile = cmds.referenceQuery(each, f=True)\n                cmds.file(refFile, importReference=True)\n    if sel:\n        cmds.select(oldSel)\n\ndef fileDialogFilter(fileFormats):\n    fileFilter = ''\n    fileFormats.append(('All', '*.*'))\n    for i, x in enumerate(fileFormats):\n        seperator = ';;' if i > 0 else ''\n        fileFilter += '{0}{1[0]} Files ({1[1]})'.format(seperator, x)\n    return fileFilter\n\ndef saveJson(data, defaultDir=None, caption='Save Json', fileFormats=[('JSON', '*.json')],\n             fileOverride=False):\n    if not fileOverride:\n        fileFilter = fileDialogFilter(fileFormats)\n        fileName = cmds.fileDialog2(dialogStyle=2,\n                                    caption=caption,\n                                    fileMode=0,\n                                    fileFilter=fileFilter,\n                                    dir=defaultDir)\n        if fileName:\n            fileName = fileName[0]\n        else:\n            return False\n    else:\n        if type(fileOverride) == list():\n            fileName = fileOverride[0]\n        else:\n            fileName = fileOverride\n    with open(fileName, 'w') as f:\n        json.dump(data, f, indent=4)\n    # print 'File Saved to: {}'.format(fileName)\n    printToMaya('File Saved: {}'.format(fileName))\n    return True\n\ndef loadJson(defaultDir=None, caption='Load Json', fileFormats=[('JSON', '*.json')],\n             fileOverride=False):\n    if not fileOverride:\n        fileFilter = fileDialogFilter(fileFormats)\n        fileName = cmds.fileDialog2(dialogStyle=1,\n                                    caption=caption,\n                                    fileMode=1,\n                                    fileFilter=fileFilter,\n                                    dir=defaultDir)\n        if fileName:\n            fileName = fileName[0]\n        else:\n            return False\n    else:\n        fileName = fileOverride\n    with open(fileName, 'r') as f:\n        data = json.load(f)\n    return data\n\ndef createNewDirs(folder, directory, subFolder=None):\n    if not os.path.isdir('{}/{}'.format(directory, folder)):\n        os.mkdir('{}/{}'.format(directory, folder))\n    if type(subFolder) == type(list()):\n        for each in subFolder:\n            createNewDirs(each, '{}/{}'.format(directory, folder))\n    elif type(subFolder) == type(dict()):\n        for f, sf in subFolder.iteritems():\n            createNewDirs(f, '{}/{}'.format(directory, folder), sf)\n\ndef createNewPipelineAsset(assetName=None, prompt=False):\n    assetName = assetNameSetup(assetName, prompt, textPrompt=True)\n    if not assetName:\n        return False\n    setAssetName(assetName)\n    assetDir = getAssetDir()\n    newAssetDir = '{}{}'.format(assetDir, assetName)\n    if os.path.isdir(newAssetDir):\n        # print 'Asset directory already exists.'\n        printToMaya('Asset directory already exists.')\n        return False\n    else:\n        os.mkdir(newAssetDir)\n        folderList = {\n            'lookDev' : [\n                'Published',\n                'WIP',\n            ],\n            'model' : [\n                'Published',\n                'WIP',\n            ],\n            'subAssets' : [],\n            'rig' : {\n                'Published' : [],\n                'WIP' : [\n                    'controlShapes',\n                    'guides',\n                    'skin',\n                ],\n            },\n            'texture' : {\n                'Published' : [\n                    'bump',\n                    'diff',\n                    'disp',\n                    'masks',\n                    'spc',\n                    'spcRough',\n                    'sss',\n                ],\n                'WIP' : [],\n            },\n        }\n\n        for k, v in folderList.iteritems():\n            createNewDirs(k, newAssetDir, v)\n        # print 'Created Asset directories: {}'.format(newAssetDir)\n        printToMaya('Created Asset Directories: {}'.format(newAssetDir))\n\ndef createNewPipelineSubAsset(subAssetName=None, prompt=False):\n    subAssetName = assetNameSetup(subAssetName, prompt, textPrompt=True, typ='subAsset')\n    if not subAssetName:\n        return False\n    setSubAssetName(subAssetName)\n    subAssetDir = getSubAssetDir()\n    newSubAssetDir = '{}{}'.format(subAssetDir, subAssetName)\n    if os.path.isdir(newSubAssetDir):\n        # print 'SubAsset directory already exists.'\n        printToMaya('SubAsset directory already exists.')\n        return False\n    else:\n        os.mkdir(newSubAssetDir)\n        folderList = {\n            'model' : [\n                'Published',\n                'WIP',\n            ],\n            'texture' : {\n                'Published' : [\n                    'bump',\n                    'diff',\n                    'disp',\n                    'masks',\n                    'spc',\n                    'spcRough',\n                    'sss',\n                ],\n                'WIP' : [],\n            },\n            'lookDev' : [\n                'Published',\n                'WIP',\n            ],\n        }\n\n        for k, v in folderList.iteritems():\n            createNewDirs(k, newSubAssetDir, v)\n        # print 'Created SubAsset directories: {}'.format(newSubAssetDir)\n        printToMaya('Created SubAsset Directories: {}'.format(newSubAssetDir))\n\ndef createNewPipelineShot(shotName=None, prompt=False):\n    shotName = assetNameSetup(shotName, prompt, textPrompt=True, typ='shot')\n    if not shotName:\n        return False\n    setShotName(shotName)\n    shotDir = getShotDir()\n    newShotDir = '{}{}'.format(shotDir, shotName)\n    if os.path.isdir(newShotDir):\n        # print 'Shot directory already exists.'\n        printToMaya('Shot directory already exists.')\n        return False\n    else:\n        os.mkdir(newShotDir)\n        folderList = {\n            'anim' : [\n                'Published',\n                'WIP',\n            ],\n            'lighting' : [\n                'Published',\n                'WIP',\n            ],\n            'nuke' : [],\n            'plates' : [\n                'misc',\n                'prep',\n                'raw',\n                'retime',\n                'roto',\n                'undistort',\n            ],\n            'renders' : [],\n        }\n\n        for k, v in folderList.iteritems():\n            createNewDirs(k, newShotDir, v)\n        # print 'Created Shot directories: {}'.format(newShotDir)\n        printToMaya('Created Shot Directories: {}'.format(newShotDir))\n\n\n\ndef loadMayaFile(assetName='', typ='', prompt=False, new=False, latest=True,\n                 shot=False, subAsset=False):\n    if shot:\n        directory = getShotDir()\n        assetTyp = 'shot'\n    elif subAsset:\n        directory = getSubAssetDir()\n        assetTyp = 'subAsset'\n    else:\n        directory = getAssetDir()\n        assetTyp = 'asset'\n\n    assetName = assetNameSetup(assetName, prompt, typ=assetTyp)\n    if not assetName:\n        return False\n    subDir = '{}{}/{}/'.format(directory, assetName, typ)\n    if not os.path.isdir(subDir):\n        print '{} asset does not exist.'.format(assetName)\n        return False\n    if latest:\n        fileName = getLatestVersion(assetName, directory, typ)\n    else:\n        fileFilter = fileDialogFilter([('Maya Ascii', '*.ma')])\n        fileName = cmds.fileDialog2(dialogStyle=2,\n                                    caption='Load {}'.format(typ),\n                                    fileMode=1,\n                                    fileFilter=fileFilter,\n                                    dir=subDir)\n        fileName = fileName[0] if fileName else False\n    if fileName:\n        if new:\n            newScene()\n            cmds.file(fileName, open=1, force=1)\n        else:\n            cmds.file(fileName, i=1, dns=1, type='mayaAscii')\n        # print 'Opened File: {}'.format(fileName)\n        printToMaya('Opened File: {}'.format(fileName))\n        return True\n    return False\n\ndef saveMayaFile(assetName='', typ='', prompt=False, autoName=False, removeRefs=False,\n                 selectionOnly=False, shot=False, subAsset=False):\n    if subAsset:\n        directory = getSubAssetDir()\n        assetTyp = 'subAsset'\n    elif shot:\n        directory = getShotDir()\n        assetTyp = 'shot'\n    else:\n        directory = getAssetDir()\n        assetTyp = 'asset'\n    assetName = assetNameSetup(assetName, prompt, typ=assetTyp)\n    if not assetName:\n        return False\n\n    subDir = '{}{}/{}/'.format(directory, assetName, typ)\n    if autoName:\n        fileName = getLatestVersion(assetName, directory, typ, new=1)\n    else:\n        fileFilter = fileDialogFilter([('Maya Ascii', '*.ma')])\n        fileName = cmds.fileDialog2(dialogStyle=2,\n                                    caption='Save {}'.format(typ.capitalize()),\n                                    fileMode=0,\n                                    fileFilter=fileFilter,\n                                    dir=subDir)\n        fileName = fileName[0] if fileName else False\n    if fileName:\n        if removeRefs:\n            removeReferences()\n        if selectionOnly:\n            cmds.file(fileName, exportSelected=True, type='mayaAscii')\n        else:\n            cmds.file(rename=fileName)\n            cmds.file(save=True, type='mayaAscii')\n        # print 'Saved File: {}'.format(fileName)\n        printToMaya('Saved File: {}'.format(fileName))\n\ndef treeAssetNamePrompt(typ='asset'):\n    if cmds.window('{}NamePrompt'.format(typ), exists=True):\n        cmds.deleteUI('{}NamePrompt'.format(typ), window=True)\n    window = cmds.window('{}NamePrompt'.format(typ), title='Set {} Name'.format(typ.capitalize()),\n                         width=200)\n    form = cmds.formLayout()\n    treeLister = cmds.treeLister(rc='fileFn.treeAssetNamePrompt(\"{}\")'.format(typ))\n    btnCommand = 'fileFn.createNewPipeline{}{}(prompt=True) \\nfileFn.treeAssetNamePrompt(\"{}\")'.format(typ.capitalize()[0], typ[1:], typ)\n    btn = cmds.button(label='Create New', command=btnCommand)\n    cmds.formLayout(form, e=1, af=((treeLister, 'top', 0),\n                                   (treeLister, 'left', 0),\n                                   (treeLister, 'bottom', 30),\n                                   (treeLister, 'right', 0),\n                                   (btn, 'bottom', 10),\n                                   (btn, 'left', 10)))\n    cmds.showWindow(window)\n\n    if typ == 'shot':\n        directory = getShotDir()\n        icon = 'Camera.png'\n    elif typ == 'asset':\n        directory = getAssetDir()\n        icon = 'alignOnMin.png'\n    elif typ == 'subAsset':\n        directory = getSubAssetDir()\n        icon = 'subdivSphere.png'\n    if not os.path.isdir(directory):\n        return False\n    ls = [f for f in os.listdir(directory) if os.path.isdir('{}/{}'.format(directory, f))]\n    if 'rigScripts' in ls:\n        ls.remove('rigScripts')\n\n    for each in ls:\n        # command = 'fileFn.assetNamePromptCommand(\"{}\", \"{}\")'.format(each, window)\n        command = 'fileFn.set{}{}Name(\"{}\") \\ncmds.window(\"{}\", e=1, vis=False)'.format(typ.capitalize()[0], typ[1:], each, window)\n        cmds.treeLister(treeLister, e=1, add=[(each, icon, command)])\n\ndef textAssetNamePrompt(title='Asset'):\n    result = cmds.promptDialog(title='{} Name'.format(title),\n                               message='{} Name:'.format(title),\n                               button=['OK', 'Cancel'],\n                               defaultButton='OK',\n                               cancelButton='Cancel',\n                               dismissString='Cancel')\n    if result == 'OK':\n        assetName = cmds.promptDialog(query=True, text=True)\n    else:\n        assetName = None\n    return assetName\n\ndef setAssetName(assetName=None):\n    if not assetName:\n        # assetName = assetNamePrompt()\n        treeAssetNamePrompt()\n    if assetName:\n        mel.eval('putenv \"assetName\" {}'.format(assetName))\n        printToMaya('Asset Set To: {}'.format(assetName))\n\ndef getAssetName(dialog=False):\n    name = mel.eval('getenv \"assetName\"')\n    if dialog:\n        cmds.confirmDialog(m='Current Asset: {}'.format(name), button=['Ok'])\n    return name\n\ndef setSubAssetName(subAssetName=None):\n    assetName = assetNameSetup(None, False)\n    if not assetName:\n        return False\n    setAssetName(assetName)\n    if not subAssetName:\n        treeAssetNamePrompt(typ='subAsset')\n    if subAssetName:\n        mel.eval('putenv \"subAssetName\" {}'.format(subAssetName))\n        printToMaya('SubAsset Set To: {}'.format(subAssetName))\n\ndef getSubAssetName(dialog=False):\n    assetName = assetNameSetup(None, False)\n    if not assetName:\n        return False\n    setAssetName(assetName)\n    name = mel.eval('getenv \"subAssetName\"')\n    if dialog:\n        cmds.confirmDialog(m='Current SubAsset: {}'.format(name), button=['Ok'])\n    return name\n\ndef setShotName(shotName=None):\n    if not shotName:\n        treeAssetNamePrompt(typ='shot')\n    if shotName:\n        mel.eval('putenv \"shotName\" {}'.format(shotName))\n        printToMaya('Shot Set To: {}'.format(shotName))\n\ndef getShotName(dialog=False):\n    name = mel.eval('getenv \"shotName\"')\n    if dialog:\n        cmds.confirmDialog(m='Current Shot: {}'.format(name), button=['Ok'])\n    return name\n\ndef assetNameSetup(assetName, prompt, textPrompt=False, typ='asset'):\n    if prompt:\n        if textPrompt:\n            assetName = textAssetNamePrompt(typ.capitalize())\n        else:\n            treeAssetNamePrompt(typ)\n    if not assetName:\n        if typ == 'asset':\n            assetName = getAssetName()\n        elif typ == 'shot':\n            assetName = getShotName()\n        elif typ == 'subAsset':\n            assetName = getSubAssetName()\n    if not assetName:\n        assetName = treeAssetNamePrompt(typ)\n    if not assetName:\n        # print 'Asset Name not specified.'\n        printToMaya('Asset Name not specified.')\n    return assetName\n\ndef reloadReferences():\n    assets, refNd = utils.getAssetsInScene()\n    for i, each in enumerate(assets):\n        referenceRig(each, replace=True, refNd=refNd[i])\n\n\ndef printToMaya(msg):\n    msg = '{}\\n'.format(msg)\n    sys.stdout.write(msg)",
			"file": "rigModules/fileFunctions.py",
			"file_size": 39359,
			"file_write_time": 131574689925065508,
			"settings":
			{
				"buffer_size": 39359,
				"line_ending": "Unix"
			}
		},
		{
			"file": "rigModules/setupFn.py",
			"settings":
			{
				"buffer_size": 3856,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "pipelineMenu.mel",
			"settings":
			{
				"buffer_size": 41132,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "rigModules/ikFunctions.py",
			"settings":
			{
				"buffer_size": 10414,
				"line_ending": "Unix"
			}
		},
		{
			"file": "rigModules/ctrlFunctions.py",
			"settings":
			{
				"buffer_size": 18201,
				"line_ending": "Windows"
			}
		},
		{
			"file": "rigModules/utilityFunctions.py",
			"settings":
			{
				"buffer_size": 30661,
				"line_ending": "Windows"
			}
		},
		{
			"file": "rigModules/mechFunctions.py",
			"settings":
			{
				"buffer_size": 27233,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 400.0,
		"last_filter": "ssp",
		"selected_items":
		[
			[
				"ssp",
				"Set Syntax: Python"
			],
			[
				"sscma",
				"Set Syntax: CMakeEditor"
			],
			[
				"package",
				"Package Control: Install Package"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"packag",
				"Package Control: Remove Package"
			],
			[
				"sscm",
				"Set Syntax: CMakeEditor"
			],
			[
				"ssba",
				"Set Syntax: Shell Script (Bash)"
			],
			[
				"ssbas",
				"Set Syntax: Shell Script (Bash)"
			],
			[
				"ssmake",
				"Set Syntax: Makefile"
			],
			[
				"ssmd",
				"Set Syntax: Markdown"
			],
			[
				"theme",
				"Colorsublime: Install Theme"
			],
			[
				"packa",
				"Package Control: Install Package"
			],
			[
				"ssc",
				"Set Syntax: C++"
			],
			[
				"pack",
				"Package Control: Remove Package"
			],
			[
				"ssc+",
				"Set Syntax: C++"
			],
			[
				"ss",
				"Set Syntax: Lua"
			],
			[
				"sscss",
				"Set Syntax: CSS"
			],
			[
				"ssl",
				"Set Syntax: Lua"
			],
			[
				"sslu",
				"Set Syntax: Lua"
			],
			[
				"sslua",
				"Set Syntax: Lua"
			],
			[
				"ssb",
				"Set Syntax: Shell Script (Bash)"
			],
			[
				"ssmel",
				"Set Syntax: MEL"
			],
			[
				"indent",
				"Indentation: Reindent Lines"
			],
			[
				"tab",
				"Indentation: Convert to Tabs"
			],
			[
				"ssht",
				"Set Syntax: HTML"
			],
			[
				"ssjs",
				"Set Syntax: JavaScript"
			],
			[
				"sshtm",
				"Set Syntax: HTML"
			],
			[
				"ssphp",
				"Set Syntax: PHP"
			],
			[
				"sssh",
				"Set Syntax: Shell Script (Bash)"
			],
			[
				"ssshe",
				"Set Syntax: Shell Script (Bash)"
			]
		],
		"width": 472.0
	},
	"console":
	{
		"height": 139.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/Jenks/maya/scripts/Jenks/scripts/rigModules",
		"/home/Jenks/maya/scripts/Jenks/scripts/controlShapes"
	],
	"file_history":
	[
		"/home/Jenks/Documents/USB/Uni_Tomfoolery/Year_3/finalProject/assets/rigScripts/treeTest.py",
		"/C/Users/mj15aaf/Downloads/userSetup.mel",
		"/E/Random/Maya/scripts/userSetup.mel",
		"/C/Users/mj15aaf/Desktop/userSetup.mel",
		"/home/Jenks/Documents/USB/Uni_Tomfoolery/Year_3/Misc/assets/rigScripts/crab.py",
		"/home/Jenks/Documents/USB/Uni_Tomfoolery/Year_3/Misc/assets/crab/rig/WIP/controlShapes/C_poop_CTRL_v001.shape",
		"/etc/openvpn/US California.ovpn",
		"/etc/resolv.conf",
		"/home/Jenks/maya/scripts/Jenks/scripts/rigModules/faceFunctions.py",
		"/home/Jenks/maya/scripts/Jenks/scripts/pipelineMenu.mel",
		"/home/Jenks/maya/scripts/Jenks/scripts/rigModules/templateRig.py",
		"/home/Jenks/Documents/USB/Uni_Tomfoolery/Year_3/finalProject/assets/sphereMan/rig/WIP/controlShapes/C_hat01_CTRL_v001.shape",
		"/mnt/MediaDrive/anno.txt",
		"/home/Jenks/maya/scripts/Jenks/README.md",
		"/tmp/.fr-MAGT0S/Jenks-1.0.0/README.md",
		"/usr/autodesk/maya2017/scripts/startup/createAndAssignShader.mel",
		"/usr/autodesk/maya2017/scripts/startup/buildShaderMenus.mel",
		"/home/Jenks/maya/scripts/Jenks/scripts/rigModules/pipelineFn.py",
		"/usr/autodesk/maya2017/scripts/startup/doCreateAssignNewMaterialTreeLister.mel",
		"/home/Jenks/maya/scripts/Jenks/scripts/magicalRenamer/magicalRenamer.py",
		"/home/Jenks/Documents/USB/Uni_Tomfoolery/Year_3/TheResistance/assets/rigScripts/washerWoman.py",
		"/home/Jenks/maya/scripts/Jenks/scripts/rigModules/miscFunctions.py",
		"/home/Jenks/maya/scripts/Jenks/scripts/rigModules/ikFunctions.py",
		"/home/Jenks/Desktop/cmakeNodesStuffs/build_Instructions",
		"/home/Jenks/Desktop/cmakeNodesStuffs/mjStretchArray/src/pluginMain.cpp",
		"/home/Jenks/Desktop/cmakeNodesStuffs/modules/FindMaya.cmake",
		"/home/Jenks/Desktop/cmakeNodesStuffs/mjRivet/CMakeLists.txt",
		"/home/Jenks/Desktop/cmakeNodesStuffs/mjStretchArray/CMakeLists.txt",
		"/home/Jenks/Desktop/cmakeNodesStuffs/mjStretchArray/src/CMakeLists.txt",
		"/home/Jenks/Desktop/cmakeNodesStuffs/mjRivet/src/CMakeLists.txt",
		"/home/Jenks/Desktop/cmakeNodesStuffs/CMakeLists.txt",
		"/home/Jenks/Desktop/mjRivet/mjRivet/Makefile",
		"/home/Jenks/Desktop/mjRivet/buildconfig",
		"/home/Jenks/Desktop/cmakeNodesStuffs/build/Makefile",
		"/home/Jenks/Desktop/cmakeNodesStuffs/src/CMakeLists.txt",
		"/home/Jenks/Desktop/cmakeNodesStuffs/src/mainPlugin.cpp",
		"/home/Jenks/Desktop/cmakeNodesStuffs/src/mjRivet.cpp",
		"/home/Jenks/Desktop/cmakeNodesStuffs/src/mjRivet.h",
		"/home/Jenks/Desktop/mjRivet/buildrules",
		"/home/Jenks/Desktop/cmakeNodesStuffs/modules/findMaya.cmake",
		"/home/Jenks/Desktop/mjRivet/mjRivet/mjRivet.cpp",
		"/home/Jenks/Desktop/mjRivet/mjRivet/mjRivet.h",
		"/home/Jenks/Desktop/mjStretchArray/mjStretchArray/mjStretchArray.cpp",
		"/usr/autodesk/maya2017/devkit/plug-ins/testNsolverNode/Makefile",
		"/usr/autodesk/maya2017/devkit/plug-ins/Makefile.subdirs",
		"/home/Jenks/Desktop/mjStretchArray/mjStretchArray/mjStretchArray.h",
		"/home/Jenks/Desktop/mjStretchArray/mjStretchArray/Makefile",
		"/home/Jenks/Desktop/mjStretchArray/linux_plugin.map",
		"/home/Jenks/Desktop/mjStretchArray/buildconfig",
		"/home/Jenks/Desktop/mjStretchArray/buildrules",
		"/usr/autodesk/maya2017/devkit/plug-ins/helloWorldCmd/Makefile",
		"/usr/autodesk/maya2017/devkit/plug-ins/transCircleNode/Makefile",
		"/usr/autodesk/maya2017/devkit/plug-ins/Makefile",
		"/home/Jenks/Downloads/mjRivet.cpp",
		"/home/Jenks/maya/scripts/Jenks/scripts/rigModules/apiFuncitons.py",
		"/home/Jenks/maya/scripts/Jenks/scripts/rigModules/fileFunctions.py",
		"/home/Jenks/maya/scripts/Jenks/scripts/rigModules/ctrlFunctions.py",
		"/home/Jenks/maya/scripts/Jenks/scripts/rigModules/utilityFunctions.py",
		"/home/Jenks/maya/scripts/Jenks/scripts/rigModules/bodyFunctions.py",
		"/home/Jenks/maya/scripts/Jenks/scripts/rigModules/skinFunctions.py",
		"/home/Jenks/maya/scripts/Jenks/scripts/nodes/mjSoftIK.py",
		"/home/Jenks/Downloads/mjStretchArray.cpp",
		"/home/Jenks/Documents/USB/Uni_Tomfoolery/Year_3/TemplateProject/workspace.mel",
		"/home/Jenks/Documents/USB/Uni_Tomfoolery/Year_3/TemplateProject/mayaProj/workspace.mel",
		"/home/Jenks/Documents/USB/Uni_Tomfoolery/Year_3/TemplateProject/untitled",
		"/home/Jenks/Documents/USB/Uni_Tomfoolery/Year_3/finalProject/assets/testRigStuff/rig/WIP/skin/pPlane1_v001.skin",
		"/home/Jenks/maya/scripts/Jenks/scripts/magicalRenamer/magicalRenamerUI.py",
		"/home/Jenks/maya/scripts/Jenks/scripts/magicalRenamer/magicalRenamerSmallUI.py",
		"/home/Jenks/maya/scripts/Jenks/scripts/magicalRenamer/renamer.py",
		"/home/Jenks/maya/scripts/Jenks/scripts/magicalRenamer/test.py",
		"/home/Jenks/Documents/USB/Uni_Tomfoolery/Year_3/AnimalGame/assets/rigScripts/femaleWolf.py",
		"/home/Jenks/maya/scripts/Jenks/scripts/rigModules/suffixDictionary.py",
		"/home/Jenks/maya/scripts/userSetup.mel",
		"/etc/systemd/system.conf",
		"/home/Jenks/maya/scripts/Jenks/scripts/rigModules/defaultBodyOptions.py",
		"/home/Jenks/maya/scripts/Jenks/scripts/modularRig/uiTest2.py",
		"/home/Jenks/Documents/USB/Uni_Tomfoolery/Year_3/TheResistance/assets/rigScripts/femalePeasant.py",
		"/home/Jenks/maya/scripts/Jenks/scripts/rigModules/setupFn.py",
		"/home/Jenks/Downloads/devkitBase/devkit/plug-ins/mjRivet/Makefile",
		"/home/Jenks/Desktop/mayaNodes/devkit/plug-ins/mjRivet/mjRivet/mjRivet.cpp",
		"/home/Jenks/Desktop/mayaNodes/devkit/plug-ins/mjRivet/mjRivet/mainPlugin.cpp",
		"/home/Jenks/Desktop/mayaNodes/devkit/plug-ins/mjRivet/mjRivet/mjRivet.vcxproj",
		"/home/Jenks/Desktop/mayaNodes/devkit/plug-ins/autoLoader/Makefile",
		"/home/Jenks/Desktop/mayaNodes/buildconfig",
		"/home/Jenks/Downloads/devkitBase/devkit/plug-ins/exampleCameraSetView/Makefile",
		"/home/Jenks/Desktop/mayaNodes/mjRivet/Makefile",
		"/home/Jenks/Desktop/mayaNodes/buildrules",
		"/home/Jenks/Desktop/mayaNodes/Makefile",
		"/home/Jenks/Downloads/devkitBase/devkit/plug-ins/buildconfig",
		"/home/Jenks/Downloads/Discord/discord.desktop",
		"/home/Jenks/maya/scripts/Jenks/scripts/rigModules/orientJoints.py",
		"/home/Jenks/maya/scripts/Jenks/jenksMenu.mel",
		"/home/Jenks/maya/scripts/Jenks/scripts/rigModules/pipelineMenuFn.py",
		"/home/Jenks/maya/2017/prefs/shelves/shelf_JenksPipeline.mel",
		"/home/Jenks/Documents/USB/Uni_Tomfoolery/Year_3/TheResistance/workspace.mel",
		"/home/Jenks/Documents/USB/Uni_Tomfoolery/Year_3/finalProject/workspace.mel",
		"/usr/autodesk/maya2017/scripts/startup/performNewScene.mel",
		"/home/Jenks/maya/2017/prefs/shelves/shelf_MotionGraphics.mel",
		"/home/Jenks/maya/2017/prefs/workspaces/Jenks.json",
		"/home/Jenks/maya/2017/prefs/workspaces/Jenks_-_Full.json",
		"/home/Jenks/maya/2017/prefs/workspaces/Maya_Classic.json",
		"/home/Jenks/maya/scripts/Jenks/scripts/modularRig/j_wwiar.py",
		"/home/Jenks/maya/scripts/Jenks/scripts/utilities.py",
		"/home/Jenks/maya/UHmenu/scripts/wp_jointsOnCurves.mel",
		"/home/Jenks/Documents/JenksProductions Web Stuff/JenksProductions_clean/showreel.html",
		"/home/Jenks/maya/scripts/Jenks/scripts/modularRig/rigTools.py",
		"/home/Jenks/maya/scripts/Jenks/scripts/modularRig/modularRig.py",
		"/home/Jenks/.config/sublime-text-3/Packages/User/Default (Linux).sublime-mousemap",
		"/home/Jenks/Documents/USB/Uni_Tomfoolery/Year_3/finalProject/assets/testRigStuff/rig/WIP/controlShapes/C_global_CTRL_01.shape",
		"/home/Jenks/maya/scripts/Jenks/scripts/controlShapes/global.shape",
		"/home/Jenks/maya/scripts/Jenks/scripts/rigModules.sublime-project",
		"/home/Jenks/.config/sublime-text-3/Packages/User/sublime_jedi.sublime-settings",
		"/home/Jenks/.config/sublime-text-3/Packages/Theme - Toxin/Toxin.sublime-theme",
		"/home/Jenks/.config/sublime-text-3/Packages/Theme - Toxin/icon_ahk.tmPreferences",
		"/home/Jenks/.config/sublime-text-3/Packages/gruvbox/gruvbox (Dark) (Medium).sublime-theme",
		"/home/Jenks/.config/sublime-text-3/Packages/gruvbox/gruvbox.skins",
		"/home/Jenks/.config/sublime-text-3/Packages/gruvbox/dependencies.json",
		"/home/Jenks/.config/sublime-text-3/Packages/gruvbox/widgets/Widget - gruvbox (Dark) (Medium).sublime-settings",
		"/home/Jenks/.config/sublime-text-3/Packages/gruvbox/README.md",
		"/home/Jenks/.config/sublime-text-3/Packages/Theme - Moka2/Moka Dark.sublime-theme",
		"/home/Jenks/.config/sublime-text-3/Packages/Theme - Toxin/Widget - Toxin.sublime-settings",
		"/home/Jenks/.config/sublime-text-3/Packages/Theme - Toxin2/Toxin.sublime-theme",
		"/home/Jenks/.config/sublime-text-3/Packages/Theme - Toxin2/Toxin.tmTheme",
		"/home/Jenks/Documents/USB/Uni_Tomfoolery/Year_3/New_Project/workspace.mel",
		"/home/Jenks/Documents/USB/Uni_Tomfoolery/Year_3/finalProject/assets/testRigStuff/rig/WIP/skin/pPlane1_02.skin",
		"/home/Jenks/Documents/USB/Uni_Tomfoolery/Year_3/finalProject/assets/testRigStuff/rig/WIP/skin/pPlane1_03.skin",
		"/home/Jenks/Documents/USB/Uni_Tomfoolery/Year_3/finalProject/assets/testRigStuff/rig/WIP/skin/pPlane1_01.skin",
		"/home/Jenks/Documents/USB/Uni_Tomfoolery/Year_3/finalProject/assets/testRigStuff/rig/WIP/skin/pPlane1_05.skin"
	],
	"find":
	{
		"height": 46.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"print ",
			"print",
			"cock",
			"saName",
			"saveSubA",
			"SubAsset",
			"assetDir",
			"setAsset",
			"publish",
			"self.handIKCtrl",
			"self.footIKCtrl",
			"self",
			"Import Published Geometry",
			"Publish Asset Geometry",
			"assetNamePrompt",
			"getLatestVersion",
			"elbowBendCtrl",
			"Start",
			"St",
			"IKStart"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"self.ikCtrl"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "rigModules/bodyFunctions.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 86499,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"origPos":
							[
								0.0,
								615.0
							],
							"show_definitions": false,
							"syncScroll": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 615.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "rigModules/fileFunctions.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 39359,
						"regions":
						{
						},
						"selection":
						[
							[
								23582,
								23588
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"origPos":
							[
								0.0,
								7931.0
							],
							"show_definitions": false,
							"syncScroll": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7931.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "rigModules/setupFn.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3856,
						"regions":
						{
						},
						"selection":
						[
							[
								462,
								462
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"origPos":
							[
								0.0,
								0.0
							],
							"show_definitions": false,
							"syncScroll": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "pipelineMenu.mel",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 41132,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"origPos":
							[
								987.0,
								1806.0
							],
							"syncScroll": false,
							"syntax": "Packages/MayaSublime/MEL.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 987.0,
						"translation.y": 1806.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				}
			]
		},
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 4,
					"file": "rigModules/ikFunctions.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10414,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"origPos":
							[
								0.0,
								0.0
							],
							"show_definitions": false,
							"syncScroll": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "rigModules/ctrlFunctions.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18201,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"origPos":
							[
								0.0,
								2982.0
							],
							"show_definitions": false,
							"syncScroll": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2982.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "rigModules/utilityFunctions.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 30661,
						"regions":
						{
						},
						"selection":
						[
							[
								17320,
								17320
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"origPos":
							[
								0.0,
								6468.0
							],
							"show_definitions": false,
							"syncScroll": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6468.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "rigModules/mechFunctions.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 27233,
						"regions":
						{
						},
						"selection":
						[
							[
								7110,
								7110
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										7110,
										7111
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										7069,
										7070
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"origPos":
							[
								0.0,
								378.0
							],
							"show_definitions": false,
							"syncScroll": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 378.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 30.0
	},
	"input":
	{
		"height": 36.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "rigModules.sublime-project",
	"replace":
	{
		"height": 74.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 253.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
